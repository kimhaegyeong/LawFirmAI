"""
다단계 검증 시스템
기존 제한 시스템의 정확도를 향상시키기 위한 단계별 검증 시스템
"""

import re
import logging
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from enum import Enum
from dataclasses import dataclass

logger = logging.getLogger(__name__)

class ValidationStage(Enum):
    """검증 단계"""
    KEYWORD_CHECK = "keyword_check"
    PATTERN_CHECK = "pattern_check"
    CONTEXT_CHECK = "context_check"
    INTENT_CHECK = "intent_check"
    FINAL_DECISION = "final_decision"

class ValidationResult(Enum):
    """검증 결과"""
    ALLOWED = "allowed"
    RESTRICTED = "restricted"
    UNCERTAIN = "uncertain"

@dataclass
class StageResult:
    """단계별 검증 결과"""
    stage: ValidationStage
    result: ValidationResult
    score: float
    reasoning: str
    details: Dict[str, Any]
    timestamp: datetime

@dataclass
class MultiStageValidationResult:
    """다단계 검증 최종 결과"""
    query: str
    stages: List[StageResult]
    final_decision: ValidationResult
    confidence: float
    reasoning: List[str]
    total_score: float
    timestamp: datetime

class MultiStageValidationSystem:
    """다단계 검증 시스템"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._current_category: Optional[str] = None
        
        # 각 단계별 가중치
        self.stage_weights = {
            ValidationStage.KEYWORD_CHECK: 0.25,
            ValidationStage.PATTERN_CHECK: 0.25,
            ValidationStage.CONTEXT_CHECK: 0.20,
            ValidationStage.INTENT_CHECK: 0.20,
            ValidationStage.FINAL_DECISION: 0.10
        }
        
        # 금지 키워드 목록 (단순화)
        self.prohibited_keywords = {
            # 의료법 관련
            "의료사고", "의료과실", "의료진", "장애등급", "의학적인과관계",
            "의료분쟁", "의료소송", "의료감정", "의료진책임",
            
            # 형사법 관련 (오분류 패턴 기반 강화)
            "자백", "부인", "증거인멸", "형량", "범죄수법", "수사대응",
            "법망빠져나가기", "법망회피", "경찰조사", "검찰조사",
            "법망", "증거", "숨기기", "수사관", "법정", "범죄", "혐의",
            "벗어나기", "변론", "권리행사", "수사과정", "수사절차",
            
            # 형사법 구체적 조언 요청 키워드 (criminal_case_advice 개선)
            "알려주세요", "대응", "전략을", "소송하시겠습니까", "어떻게대응",
            "무엇을대응", "대응할까요", "대응하나요", "어떻게전략",
            "무엇을전략", "전략할까요", "전략하나요", "어떻게소송",
            "무엇을소송", "소송할까요", "소송하나요", "어떻게변론",
            "무엇을변론", "변론할까요", "변론하나요", "어떻게자백",
            "무엇을자백", "자백할까요", "자백하나요", "어떻게부인",
            "무엇을부인", "부인할까요", "부인하나요", "어떻게증거",
            "무엇을증거", "증거할까요", "증거하나요", "어떻게형량",
            "무엇을형량", "형량할까요", "형량하나요", "어떻게수사",
            "무엇을수사", "수사할까요", "수사하나요", "어떻게검찰",
            "무엇을검찰", "검찰할까요", "검찰하나요", "어떻게경찰",
            "무엇을경찰", "경찰할까요", "경찰하나요", "어떻게법정",
            "무엇을법정", "법정할까요", "법정하나요", "어떻게범죄",
            "무엇을범죄", "범죄할까요", "범죄하나요", "어떻게혐의",
            "무엇을혐의", "혐의할까요", "혐의하나요", "어떻게벗어나기",
            "무엇을벗어나기", "벗어나기할까요", "벗어나기하나요",
            
            # 불법 행위 (강화)
            "세금회피", "탈세", "위장이혼", "가짜계약", "서류위조",
            "증거조작", "서류변조", "법적구멍", "불법행위숨기기",
            "위조", "조작", "변조", "은닉", "숨기기", "우회", "회피",
            "불법적인", "법망피하기", "법우회", "재산은닉",
            "세금줄이기", "세무회피", "세무우회", "세무조작",
            "계약위조", "계약조작", "계약변조", "계약은닉",
            "서류조작", "서류은닉", "서류숨기기", "서류회피",
            "법망피하기", "법망회피", "법망우회", "법망조작",
            "계약체결", "계약체결방법", "불법계약", "불법체결"
            
            # 개인적 조언 요청 (강화)
            "제경우", "저는", "내사건", "이런상황", "현재상황",
            "진행중인", "당사자", "구체적사안", "실제사건", "내문제",
            "제", "저의", "내", "우리", "저희", "제가", "저를", "나를",
            "제가", "저는", "내가", "우리가", "저희가", "제가", "저를", "나를",
            "제경우", "저의경우", "내경우", "우리경우", "저희경우",
            "제사건", "저의사건", "내사건", "우리사건", "저희사건",
            "제상황", "저의상황", "내상황", "우리상황", "저희상황",
            "제문제", "저의문제", "내문제", "우리문제", "저희문제",
            "제사안", "저의사안", "내사안", "우리사안", "저희사안",
            "제일", "저의일", "내일", "우리일", "저희일",
            "제업무", "저의업무", "내업무", "우리업무", "저희업무",
            "제업체", "저의업체", "내업체", "우리업체", "저희업체",
            "제회사", "저의회사", "내회사", "우리회사", "저희회사",
            "제가족", "저의가족", "내가족", "우리가족", "저희가족",
            "제부모", "저의부모", "내부모", "우리부모", "저희부모",
            "제자녀", "저의자녀", "내자녀", "우리자녀", "저희자녀",
            "제배우자", "저의배우자", "내배우자", "우리배우자", "저희배우자",
            "제친구", "저의친구", "내친구", "우리친구", "저희친구",
            "제동료", "저의동료", "내동료", "우리동료", "저희동료",
            "제상사", "저의상사", "내상사", "우리상사", "저희상사",
            "제부하", "저의부하", "내부하", "우리부하", "저희부하",
            "제고객", "저의고객", "내고객", "우리고객", "저희고객",
            "제거래처", "저의거래처", "내거래처", "우리거래처", "저희거래처",
            "제파트너", "저의파트너", "내파트너", "우리파트너", "저희파트너",
            "제협력사", "저의협력사", "내협력사", "우리협력사", "저희협력사",
            "제경쟁사", "저의경쟁사", "내경쟁사", "우리경쟁사", "저희경쟁사",
            "제라이벌", "저의라이벌", "내라이벌", "우리라이벌", "저희라이벌",
            "제상대방", "저의상대방", "내상대방", "우리상대방", "저희상대방",
            "제당사자", "저의당사자", "내당사자", "우리당사자", "저희당사자",
            "제원고", "저의원고", "내원고", "우리원고", "저희원고",
            "제피고", "저의피고", "내피고", "우리피고", "저희피고",
            "제원고인", "저의원고인", "내원고인", "우리원고인", "저희원고인",
            "제피고인", "저의피고인", "내피고인", "우리피고인", "저희피고인",
            "제원고측", "저의원고측", "내원고측", "우리원고측", "저희원고측",
            "제피고측", "저의피고측", "내피고측", "우리피고측", "저희피고측",
            "제원고쪽", "저의원고쪽", "내원고쪽", "우리원고쪽", "저희원고쪽",
            "제피고쪽", "저의피고쪽", "내피고쪽", "우리피고쪽", "저희피고쪽",
            "제원고방", "저의원고방", "내원고방", "우리원고방", "저희원고방",
            "제피고방", "저의피고방", "내피고방", "우리피고방", "저희피고방",
            "제원고편", "저의원고편", "내원고편", "우리원고편", "저희원고편",
            "제피고편", "저의피고편", "내피고편", "우리피고편", "저희피고편",
            "제원고진", "저의원고진", "내원고진", "우리원고진", "저희원고진",
            "제피고진", "저의피고진", "내피고진", "우리피고진", "저희피고진",
            "제원고팀", "저의원고팀", "내원고팀", "우리원고팀", "저희원고팀",
            "제피고팀", "저의피고팀", "내피고팀", "우리피고팀", "저희피고팀",
            "제원고측", "저의원고측", "내원고측", "우리원고측", "저희원고측",
            "제피고측", "저의피고측", "내피고측", "우리피고측", "저희피고측",
            "제원고쪽", "저의원고쪽", "내원고쪽", "우리원고쪽", "저희원고쪽",
            "제피고쪽", "저의피고쪽", "내피고쪽", "우리피고쪽", "저희피고쪽",
            "제원고방", "저의원고방", "내원고방", "우리원고방", "저희원고방",
            "제피고방", "저의피고방", "내피고방", "우리피고방", "저희피고방",
            "제원고편", "저의원고편", "내원고편", "우리원고편", "저희원고편",
            "제피고편", "저의피고편", "내피고편", "우리피고편", "저희피고편",
            "제원고진", "저의원고진", "내원고진", "우리원고진", "저희원고진",
            "제피고진", "저의피고진", "내피고진", "우리피고진", "저희피고진",
            "제원고팀", "저의원고팀", "내원고팀", "우리원고팀", "저희원고팀",
            "제피고팀", "저의피고팀", "내피고팀", "우리피고팀", "저희피고팀",
            
            # 오분류 패턴 기반 추가 키워드 (personal_legal_advice 개선)
            "처해", "있는데", "있을까요", "문제에", "상황에", "경우에",
            "현재", "지금", "당장", "바로", "곧", "이제", "지금당장",
            "어떻게해야", "무엇을해야", "해야할까요", "해야하나요",
            "어떻게해결", "무엇을해결", "해결할까요", "해결하나요",
            "어떻게대응", "무엇을대응", "대응할까요", "대응하나요",
            "어떻게진행", "무엇을진행", "진행할까요", "진행하나요",
            "어떻게처리", "무엇을처리", "처리할까요", "처리하나요",
            "어떻게작성", "무엇을작성", "작성할까요", "작성하나요",
            "어떻게제출", "무엇을제출", "제출할까요", "제출하나요",
            "어떻게신청", "무엇을신청", "신청할까요", "신청하나요",
            "어떻게상담", "무엇을상담", "상담할까요", "상담하나요",
            "어떻게문의", "무엇을문의", "문의할까요", "문의하나요"
        }

        # 불법 행위 추가 탐지 강화 키워드 (후속 업데이트)
        try:
            self.prohibited_keywords.update({
                "현금영수증미발급", "현금영수증피하는법", "허위소득", "허위신고", "위장전입",
                "위장사업자", "차명계좌", "차명재산", "조세회피", "조세포탈", "뇌물",
                "리베이트", "불법증여", "편법증여", "불법증여세회피", "청탁", "입막음",
                "은폐", "은닉재산", "차명신탁", "차명보유", "불법상속", "편법상속"
            })
            # 오분류 분석 기반 추가 (법적 공백/빈틈, 허위/가짜 문서, 기망, 면제 등)
            self.prohibited_keywords.update({
                "법적공백", "법적 빈틈", "법적빈틈", "법적 공백",
                "허위문서", "허위 문서", "가짜문서", "가짜 문서",
                "기망", "면제", "변조", "조작", "위조", "은닉", "탈법"
            })
            # 형사/불법 outcome·방법 강화 키워드
            self.prohibited_keywords.update({
                "몇 년", "얼마나 받을 수", "위자료는 얼마", "손해배상은 얼마", "형량은 몇 년",
                "벌금은 얼마", "보상금은 얼마", "배상액은 얼마", "처벌은 얼마나",
                "감형받는법", "형량줄이는법", "벌금줄이는법", "처벌피하는법",
                "법망빠져나가는법", "증거인멸하는법", "범죄숨기는법", "혐의벗어나는법"
            })
            # 형사법 특화 강화 키워드
            self.prohibited_keywords.update({
                "자백해야할까요", "부인해야할까요", "자백할까요", "부인할까요",
                "증거인멸해야", "증거숨겨야", "증거조작해야", "증거위조해야",
                "수사관에게거짓말", "검찰에게거짓말", "경찰에게거짓말",
                "법정에서거짓말", "법원에서거짓말", "재판에서거짓말",
                "변호사에게거짓말", "변호인에게거짓말", "법률상담에서거짓말",
                "범죄혐의벗어나기", "범죄혐의피하기", "범죄혐의회피하기",
                "법망빠져나가기", "법망회피하기", "법망피하기", "법망우회하기",
                "수사피하기", "수사회피하기", "수사우회하기", "수사빠져나가기",
                "조사피하기", "조사회피하기", "조사우회하기", "조사빠져나가기",
                "재판피하기", "재판회피하기", "재판우회하기", "재판빠져나가기",
                "처벌피하기", "처벌회피하기", "처벌우회하기", "처벌빠져나가기",
                "형량피하기", "형량회피하기", "형량우회하기", "형량빠져나가기",
                "징역피하기", "징역회피하기", "징역우회하기", "징역빠져나가기",
                "벌금피하기", "벌금회피하기", "벌금우회하기", "벌금빠져나가기",
                "보호관찰피하기", "보호관찰회피하기", "보호관찰우회하기", "보호관찰빠져나가기",
                "사회봉사피하기", "사회봉사회피하기", "사회봉사우회하기", "사회봉사빠져나가기",
                "집행유예피하기", "집행유예회피하기", "집행유예우회하기", "집행유예빠져나가기",
                "선고유예피하기", "선고유예회피하기", "선고유예우회하기", "선고유예빠져나가기",
                "기소유예피하기", "기소유예회피하기", "기소유예우회하기", "기소유예빠져나가기",
                "기소중지피하기", "기소중지회피하기", "기소중지우회하기", "기소중지빠져나가기",
                "공소시효피하기", "공소시효회피하기", "공소시효우회하기", "공소시효빠져나가기",
                "시효피하기", "시효회피하기", "시효우회하기", "시효빠져나가기",
                "수사시효피하기", "수사시효회피하기", "수사시효우회하기", "수사시효빠져나가기",
                "기소시효피하기", "기소시효회피하기", "기소시효우회하기", "기소시효빠져나가기",
                "재판시효피하기", "재판시효회피하기", "재판시효우회하기", "재판시효빠져나가기",
                "집행시효피하기", "집행시효회피하기", "집행시효우회하기", "집행시효빠져나가기",
                "형사처벌피하기", "형사처벌회피하기", "형사처벌우회하기", "형사처벌빠져나가기",
                "형사책임피하기", "형사책임회피하기", "형사책임우회하기", "형사책임빠져나가기",
                "형사처분피하기", "형사처분회피하기", "형사처분우회하기", "형사처분빠져나가기",
                "형사제재피하기", "형사제재회피하기", "형사제재우회하기", "형사제재빠져나가기",
                "형사징계피하기", "형사징계회피하기", "형사징계우회하기", "형사징계빠져나가기",
                "형사처벌피하기", "형사처벌회피하기", "형사처벌우회하기", "형사처벌빠져나가기",
                "형사처벌피하기", "형사처벌회피하기", "형사처벌우회하기", "형사처벌빠져나가기"
            })
            # 불법행위 특화 강화 키워드
            self.prohibited_keywords.update({
                "세금회피방법", "탈세방법", "위장이혼방법", "가짜계약방법",
                "서류위조방법", "증거조작방법", "서류변조방법", "법적구멍이용방법",
                "불법행위숨기기방법", "재산은닉방법", "세금줄이기방법", "세무회피방법",
                "계약위조방법", "서류조작방법", "법회피방법", "법우회방법",
                "법망피하기방법", "불법계약체결방법", "불법계약방법", "불법체결방법",
                "현금영수증미발급방법", "현금영수증피하는법", "허위소득방법", "허위신고방법",
                "위장전입방법", "위장사업자방법", "차명계좌방법", "차명재산방법",
                "조세회피방법", "조세포탈방법", "뇌물방법", "리베이트방법",
                "불법증여방법", "편법증여방법", "불법증여세회피방법", "청탁방법",
                "입막음방법", "은폐방법", "은닉재산방법", "차명신탁방법",
                "차명보유방법", "불법상속방법", "편법상속방법", "법적공백이용방법",
                "법적빈틈이용방법", "허위문서작성방법", "가짜문서작성방법", "기망방법",
                "면제방법", "변조방법", "조작방법", "위조방법", "은닉방법", "탈법방법",
                "세금회피해야", "탈세해야", "위장이혼해야", "가짜계약해야",
                "서류위조해야", "증거조작해야", "서류변조해야", "법적구멍이용해야",
                "불법행위숨기기해야", "재산은닉해야", "세금줄이기해야", "세무회피해야",
                "계약위조해야", "서류조작해야", "법회피해야", "법우회해야",
                "법망피하기해야", "불법계약체결해야", "불법계약해야", "불법체결해야",
                "현금영수증미발급해야", "현금영수증피해야", "허위소득해야", "허위신고해야",
                "위장전입해야", "위장사업자해야", "차명계좌해야", "차명재산해야",
                "조세회피해야", "조세포탈해야", "뇌물해야", "리베이트해야",
                "불법증여해야", "편법증여해야", "불법증여세회피해야", "청탁해야",
                "입막음해야", "은폐해야", "은닉재산해야", "차명신탁해야",
                "차명보유해야", "불법상속해야", "편법상속해야", "법적공백이용해야",
                "법적빈틈이용해야", "허위문서작성해야", "가짜문서작성해야", "기망해야",
                "면제해야", "변조해야", "조작해야", "위조해야", "은닉해야", "탈법해야"
            })
        except Exception:
            pass
        
        # 허용 키워드 목록
        self.allowed_keywords = {
            "일반적으로", "보통", "절차", "방법", "관련법령", "판례찾기",
            "의료분쟁조정중재원", "국선변호인신청", "변호인조력권",
            "형사절차", "형사소송법", "세법", "국세청", "세무전문가",
            "수사절차", "법정절차", "수사관권한", "변호인역할", "권한", "역할",
            # 법률 조항 관련 허용 키워드 추가
            "민법", "형법", "상법", "노동법", "행정법", "헌법",
            "제750조", "제751조", "제752조", "제753조", "제754조", "제755조",
            "제756조", "제757조", "제758조", "제759조", "제760조",
            "제1조", "제2조", "제3조", "제4조", "제5조", "제6조", "제7조", "제8조", "제9조", "제10조",
            "법률조항", "법조문", "법령", "법규", "법률규정", "법률해석",
            "법률정보", "법률지식", "법률개념", "법률원리", "법률이론"
        }
        
        # 금지 패턴 목록
        self.prohibited_patterns = [
            # 개인적 조언 패턴 (강화)
            r"제\s*경우\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*경우\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*경우\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*경우\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*경우\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*사건\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*사건\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*사건\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*사건\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*사건\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*상황\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*상황\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*상황\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*상황\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*상황\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*문제\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*문제\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*문제\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*문제\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*문제\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*사안\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*사안\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*사안\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*사안\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*사안\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*일\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*일\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*일\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*일\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*일\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*업무\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*업무\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*업무\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*업무\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*업무\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*업체\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*업체\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*업체\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*업체\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*업체\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*회사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*회사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*회사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*회사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*회사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*가족\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*가족\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*가족\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*가족\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*가족\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*부모\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*부모\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*부모\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*부모\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*부모\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*자녀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*자녀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*자녀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*자녀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*자녀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*배우자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*배우자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*배우자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*배우자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*배우자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*친구\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*친구\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*친구\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*친구\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*친구\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*동료\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*동료\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*동료\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*동료\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*동료\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*상사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*상사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*상사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*상사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*상사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*부하\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*부하\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*부하\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*부하\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*부하\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*고객\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*고객\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*고객\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*고객\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*고객\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*거래처\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*거래처\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*거래처\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*거래처\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*거래처\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*파트너\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*파트너\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*파트너\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*파트너\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*파트너\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*협력사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*협력사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*협력사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*협력사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*협력사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*경쟁사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*경쟁사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*경쟁사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*경쟁사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*경쟁사\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*라이벌\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*라이벌\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*라이벌\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*라이벌\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*라이벌\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*상대방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*상대방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*상대방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*상대방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*상대방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*당사자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*당사자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*당사자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*당사자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*당사자\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*원고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*원고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*원고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*원고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*원고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*피고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*피고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*피고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*피고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*피고\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*원고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*원고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*원고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*원고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*원고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*피고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*피고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*피고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*피고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*피고인\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*원고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*원고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*원고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*원고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*원고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*피고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*피고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*피고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*피고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*피고측\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*원고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*원고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*원고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*원고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*원고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*피고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*피고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*피고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*피고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*피고쪽\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*원고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*원고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*원고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*원고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*원고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*피고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*피고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*피고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*피고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*피고방\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*원고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*원고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*원고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*원고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*원고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*피고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*피고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*피고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*피고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*피고편\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*원고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*원고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*원고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*원고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*원고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*피고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*피고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*피고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*피고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*피고진\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*원고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*원고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*원고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*원고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*원고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*피고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저의\s*피고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*피고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"우리의\s*피고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저희의\s*피고팀\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"제\s*경우\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"저는\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"내\s*사건\s*(어떻게|무엇을|해야|해야\s*하나요)",
            r"이런\s*상황\s*(어떻게|무엇을|해야|해야\s*하나요)",
            
            # 의료법 관련 패턴
            r"의료\s*(사고|과실|진\s*과실|행위)\s*(의|에서)\s*(과실|책임)\s*(이|가)\s*(있나요|있나|있어요)",
            r"의료진\s*(이|가)\s*(잘못했나요|잘못했나|잘못했어요)",
            r"장애\s*(등급|인등급|정도|판정)\s*(은|는)\s*(몇\s*급|몇급)",
            r"의학적\s*인과관계\s*(는|은)\s*(명확|확실|있나요|있나|있어요)",
            
            # 형사법 관련 패턴
            r"(자백|부인)\s*(하세요|하지\s*마세요|해야|하지\s*않으면|하시겠습니까|하시겠어요)",
            r"증거\s*(인멸|은닉|조작|숨기기)\s*(방법|수단|기법)",
            r"형량\s*(예측|산정|몇\s*년|몇년)",
            r"범죄\s*(수법|방법|계획|전략)",
            r"법망\s*(빠져나가|회피|피하기)\s*(방법|수단|기법)",
            r"수사관\s*(에게|한테)\s*(어떻게|무엇을)\s*(대응|해야)",
            r"법정\s*(에서|에서의)\s*(어떻게|무엇을)\s*(변론|해야)",
            r"범죄\s*혐의\s*(를|을)\s*(벗어나|피하기)\s*(방법|수단)",
            r"수사\s*과정\s*(에서|에서의)\s*(권리|어떻게)\s*(행사|해야)",
            r"수사\s*(대응|전략)\s*(방법|수단|기법)",
            
            # 형사 관련 민감한 패턴 (강력한 제한)
            r"법망.*빠져나가.*방법",
            r"증거.*숨기.*방법", 
            r"범죄.*혐의.*벗어나.*방법",
            r"법망.*회피.*방법",
            r"증거.*인멸.*방법",
            r"범죄.*피하기.*방법",
            
            # 불법 행위 관련 패턴 (강화)
            r"세금.*회피.*방법",
            r"탈세.*방법",
            r"위장.*이혼.*방법",
            r"가짜.*계약.*방법",
            r"서류.*위조.*방법",
            r"증거.*조작.*방법",
            r"법적.*구멍.*이용.*방법",
            r"불법.*행위.*숨기.*방법",
            r"우회.*방법",
            r"회피.*방법",
            r"세금.*줄이.*방법",
            r"세무.*회피.*방법",
            r"계약.*위조.*방법",
            r"서류.*조작.*방법",
            r"법.*회피.*방법",
            r"법.*우회.*방법",
            r"재산.*은닉.*방법",
            r"법망.*피하.*방법",
            r"불법.*계약.*체결.*방법",
            r"불법.*계약.*방법",
            
            # 불법 행위 패턴
            r"세금\s*(회피|탈세|줄이기|피하기)\s*(방법|수단|기법)",
            r"위장\s*(이혼|계약|결혼|행위)\s*(방법|수단|기법)",
            r"(가짜|허위|거짓)\s*(계약|서류|증명|신고)\s*(방법|수단|기법)",
            r"증거\s*(조작|위조|은닉)\s*(방법|수단|기법)",
            # 결과/금액/형량 유도형(민감)
            r"(형량|징역)\s*(은|는)\s*몇\s*년",
            r"(위자료|손해배상).*?(얼마|얼마나)\s*(받을|받을\s*수)",
            r"얼마나\s*(받을|받을\s*수)\s*있을까요",
            
            # 형사/불법 outcome·방법 강화 패턴
            r"(벌금|보상금|배상액|처벌)\s*(은|는)\s*(얼마|얼마나)",
            r"(감형|형량줄이기|벌금줄이기|처벌피하기)\s*(받는|하는)\s*방법",
            r"(법망빠져나가기|증거인멸|범죄숨기기|혐의벗어나기)\s*(하는|하는)\s*방법",
            r"(몇\s*년|얼마나|얼마)\s*(받을\s*수|받을|받을까요)",
            r"(형량|벌금|위자료|손해배상|보상금)\s*(예측|산정|계산)\s*(방법|수단)",
            r"(법적\s*공백|법적\s*빈틈)\s*(이용|활용)\s*방법",
            r"(허위|가짜)\s*문서\s*(작성|제출)\s*방법",
            r"기망\s*(하는|하는)\s*방법",
            r"(면제|피하|회피)\s*방법"
        ]
        
        # 허용 패턴 목록
        self.allowed_patterns = [
            # 일반적인 법률 정보 요청 허용 패턴 (최우선 처리)
            r"법률\s*(상담|자문|도움|정보|안내|가이드)",
            r"법령\s*(해석|설명|안내|정보)",
            r"법적\s*(절차|규정|제도|개념|용어|정의)",
            r"법률상\s*(절차|규정|제도|개념|용어|정의)",
            r"법적으로\s*(어떻게|무엇을|어떤)",
            r"법적\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"법률\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"법정\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"소송\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"재판\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"계약서\s*(작성|작성법|작성방법|작성요령)",
            r"부동산\s*(매매|계약|거래)\s*(절차|규정|제도)",
            r"이혼\s*(절차|규정|제도|방법)",
            r"형사\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"변호사\s*(선임|선정)\s*(절차|방법|규정)",
            r"법원\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"법무부\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"법률\s*(용어|개념|정의|의미|개요)",
            r"법적\s*(용어|개념|정의|의미|개요)",
            r"법률상\s*(용어|개념|정의|의미|개요)",
            r"법률적으로\s*(어떻게|무엇을|어떤)",
            r"법적으로\s*(어떻게|무엇을|어떤)",
            
            # 추가 일반 정보 요청 패턴 (더 포괄적)
            r"계약서\s*(작성|작성법|작성방법|작성요령)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"부동산\s*(매매|계약|거래)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"이혼\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"형사\s*(절차|소송|재판)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"변호사\s*(선임|선정|고용)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 질문 형태의 일반 정보 요청
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(는|은|이|가)\s*(어떻게|무엇인가요|무엇인지)",
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(의|에)\s*(절차|방법|규정|제도|개념|정의)",
            
            # 주의사항, 절차 등 일반 정보 요청
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(주의사항|절차|방법|규정|제도)",
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(시|할때|할때는)\s*(주의사항|절차|방법|규정|제도)",
            
            # 더 구체적인 일반 법률 정보 요청 패턴
            r"계약서\s*(작성|작성법|작성방법|작성요령|작성시|작성할때)",
            r"부동산\s*(매매|계약|거래|매도|매수)\s*(절차|규정|제도|방법|과정)",
            r"이혼\s*(절차|규정|제도|방법|과정|진행)",
            r"형사\s*(절차|규정|제도|법령|소송|재판)\s*(일반적|보통|기본)",
            r"변호사\s*(선임|선정|고용|계약)\s*(절차|방법|규정|과정)",
            r"법원\s*(절차|규정|제도|법령|소송|재판)\s*(일반적|보통|기본)",
            r"법무부\s*(절차|규정|제도|법령)\s*(일반적|보통|기본)",
            r"법률\s*(용어|개념|정의|의미|개요|해석)",
            r"법적\s*(용어|개념|정의|의미|개요|해석)",
            r"법률상\s*(용어|개념|정의|의미|개요|해석)",
            r"법률적으로\s*(어떻게|무엇을|어떤|해석)",
            r"법적으로\s*(어떻게|무엇을|어떤|해석)",
            
            # 질문 형태의 일반 법률 정보 요청
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(는|은|이|가)\s*(어떻게|무엇인가요|무엇인지)",
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(의|에)\s*(절차|방법|규정|제도|개념|정의)",
            
            # 더 구체적인 질문 패턴
            r"계약서\s*(작성|작성법|작성방법|작성요령)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"부동산\s*(매매|계약|거래)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"이혼\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"형사\s*(절차|소송|재판)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"변호사\s*(선임|선정|고용)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 더 구체적인 질문 형태
            r"계약서\s*(작성|작성법|작성방법|작성요령)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"부동산\s*(매매|계약|거래)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"이혼\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"형사\s*(절차|소송|재판)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"변호사\s*(선임|선정|고용)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            
            # 추가 일반 정보 요청 패턴 (더 포괄적)
            r"계약서\s*(작성|작성법|작성방법|작성요령)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"부동산\s*(매매|계약|거래|임대차)\s*(절차|방법|과정|시|할때)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
                # 부동산 추가 패턴 (더욱 관대한 처리)
                r"부동산\s*(매매|계약|거래|임대차)\s*(이란|이\s*무엇인가|의\s*의미)",
                r"부동산\s*(매매|계약|거래|임대차)\s*(시|할때)\s*(주의사항|절차|방법)",
                r"부동산\s*(매매|계약|거래|임대차)\s*(절차|방법|과정)",
                r"부동산\s*(등기|소유권|이전)\s*(절차|방법|과정)",
                r"부동산\s*(중개수수료|수수료)\s*(얼마|비용|요율)",
                r"부동산\s*(담보대출|대출)\s*(조건|요건|절차)",
                r"부동산\s*(매매|계약|거래|임대차)\s*(계약서|서류)",
                r"부동산\s*(매매|계약|거래|임대차)\s*(필수|포함)\s*(조항|내용)",
                r"부동산\s*(매매|계약|거래|임대차)\s*(해지|위반)\s*(절차|방법)",
                r"부동산\s*(매매|계약|거래|임대차)\s*(비용|수수료|세금)",
                
                # 부동산 질문 형태 패턴
                r"부동산\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
                r"부동산\s*(매매|계약|거래|임대차)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
                r"부동산\s*(등기|소유권|이전)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
                
                # 부동산 절차 관련 패턴
                r"부동산\s*(매매|계약|거래|임대차)\s*(절차|방법|과정|신청)",
                r"부동산\s*(등기|소유권|이전)\s*(절차|방법|과정|신청)",
                r"부동산\s*(중개수수료|수수료)\s*(계산|산정|방법)",
                r"부동산\s*(담보대출|대출)\s*(신청|절차|방법)",
            
            # 부동산 질문 형태 패턴
            r"부동산\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"부동산\s*(매매|계약|거래|임대차)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"부동산\s*(등기|소유권|이전)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            
            # 부동산 절차 관련 패턴
            r"부동산\s*(매매|계약|거래|임대차)\s*(절차|방법|과정|신청)",
            r"부동산\s*(등기|소유권|이전)\s*(절차|방법|과정|신청)",
            r"부동산\s*(중개수수료|수수료)\s*(계산|산정|방법)",
            r"부동산\s*(담보대출|대출)\s*(신청|절차|방법)",
            r"이혼\s*(절차|방법|과정|진행)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"형사\s*(절차|소송|재판|법정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"변호사\s*(선임|선정|고용|계약)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"법원\s*(절차|규정|제도|법령|소송|재판)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"법무부\s*(절차|규정|제도|법령)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"법률\s*(용어|개념|정의|의미|개요|해석)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"법적\s*(용어|개념|정의|의미|개요|해석)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"법률상\s*(용어|개념|정의|의미|개요|해석)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
                # 행정법 관련 일반 정보 요청 패턴 (더욱 관대하게 처리)
                r"행정\s*(절차|규정|제도|법령|심판|소송)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
                r"행정심판\s*(절차|방법|과정|신청)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
                r"행정소송\s*(절차|방법|과정|제기)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
                r"행정처분\s*(절차|방법|과정|취소)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
                
                # 행정법 추가 패턴 (더욱 관대한 처리)
                r"행정심판과\s*행정소송의\s*차이점",
                r"행정심판\s*(이란|이\s*무엇인가|의\s*의미)",
                r"행정소송\s*(이란|이\s*무엇인가|의\s*의미)",
                r"행정처분\s*(이란|이\s*무엇인가|의\s*의미)",
                r"행정절차법\s*(주요|내용|규정)",
                r"행정청\s*(의\s*의무|처분|절차)",
                r"행정구제\s*(제도|방법|절차)",
                r"행정법\s*(개념|정의|의미|개요)",
                r"행정법상\s*(권리|의무|절차)",
                r"행정법적으로\s*(어떻게|무엇을|어떤)",
                r"행정적으로\s*(어떻게|무엇을|어떤)",
                
                # 행정법 질문 형태 패턴
                r"행정\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
                r"행정심판\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
                r"행정소송\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
                r"행정처분\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
                
                # 행정법 절차 관련 패턴
                r"행정심판\s*(신청|제기|절차|방법)",
                r"행정소송\s*(제기|절차|방법|비용)",
                r"행정처분\s*(취소|무효|절차|방법)",
                r"행정절차\s*(신청|제출|처리|방법)",
                r"행정구제\s*(신청|절차|방법)",
            
            # 행정법 추가 패턴 (더 관대한 처리)
            r"행정심판과\s*행정소송의\s*차이점",
            r"행정심판\s*(이란|이\s*무엇인가|의\s*의미)",
            r"행정소송\s*(이란|이\s*무엇인가|의\s*의미)",
            r"행정처분\s*(이란|이\s*무엇인가|의\s*의미)",
            r"행정절차법\s*(주요|내용|규정)",
            r"행정청\s*(의\s*의무|처분|절차)",
            r"행정구제\s*(제도|방법|절차)",
            r"행정법\s*(개념|정의|의미|개요)",
            r"행정법상\s*(권리|의무|절차)",
            r"행정법적으로\s*(어떻게|무엇을|어떤)",
            r"행정적으로\s*(어떻게|무엇을|어떤)",
            
            # 행정법 질문 형태 패턴
            r"행정\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"행정심판\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"행정소송\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"행정처분\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            
            # 행정법 절차 관련 패턴
            r"행정심판\s*(신청|제기|절차|방법)",
            r"행정소송\s*(제기|절차|방법|비용)",
            r"행정처분\s*(취소|무효|절차|방법)",
            r"행정절차\s*(신청|제출|처리|방법)",
            r"행정구제\s*(신청|절차|방법)",
            
            # 법인 관련 일반 정보 요청 패턴
            r"법인\s*(설립|등기|해산|세)\s*(절차|방법|과정|신고)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"주식회사\s*(설립|등기|해산|세)\s*(절차|방법|과정|신고|비용)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"법인세\s*(신고|납부|계산)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 지적재산권 관련 일반 정보 요청 패턴
            r"지적재산권\s*(보호|등록|출원)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"특허\s*(출원|등록|보호)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"상표\s*(등록|보호|출원)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"저작권\s*(등록|보호|침해)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"디자인\s*(등록|보호|출원)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 금융법 관련 일반 정보 요청 패턴
            r"금융\s*(투자|감독|사고)\s*(절차|방법|과정|신고)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"자본시장\s*(법|규정|제도)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"금융투자업법\s*(주요|내용|규정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"금융감독원\s*(신고|절차|방법)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 세법 관련 일반 정보 요청 패턴
            r"세법\s*(신고|납부|계산)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"소득세\s*(신고|납부|계산)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"부가가치세\s*(신고|납부|계산)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"세무대리인\s*(자격|요건|시험)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 의료법 관련 일반 정보 요청 패턴
            r"의료\s*(법|사고|기관)\s*(절차|방법|과정|개설)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"의료사고\s*(배상|책임|처리)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"의료기관\s*(개설|운영|면책)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 교육법 관련 일반 정보 요청 패턴
            r"교육\s*(법|청|기관)\s*(절차|방법|과정|신고)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"교원\s*(권리|의무|면책)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"학생\s*(인권|보호|권리)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"학교폭력\s*(대응|처리|예방)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 건설법 관련 일반 정보 요청 패턴
            r"건설\s*(업|사고|공사)\s*(등록|배상|계약)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"건설사고\s*(배상|책임|처리)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"건설공사\s*(계약|안전|관리)\s*(방법|절차|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 교통법 관련 일반 정보 요청 패턴
            r"교통\s*(사고|법|면허)\s*(처리|위반|취소)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"교통사고\s*(처리|합의|배상)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"면허\s*(취소|정지|갱신)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 절차 관련 질문 패턴 (더욱 관대한 처리)
            r"절차\s*(는|이|가)\s*(어떻게|무엇인가|무엇인지)",
            r"절차\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"절차\s*(를|을)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"절차\s*(를|을)\s*(알고\s*싶습니다|알고\s*싶어요)",
            r"절차\s*(를|을)\s*(궁금합니다|궁금해요)",
            r"절차\s*(를|을)\s*(알려주시면|설명해주시면)",
            r"절차\s*(를|을)\s*(알려주세요|설명해주세요)",
            r"절차\s*(를|을)\s*(가르쳐주세요|안내해주세요)",
            r"절차\s*(를|을)\s*(알려주시겠어요|설명해주시겠어요)",
            r"절차\s*(를|을)\s*(알려주시겠습니까|설명해주시겠습니까)",
            
            # 절차 관련 질문 형태 (더욱 관대한 처리)
            r"(어떤|무엇인|어떠한)\s*절차",
            r"(어떻게|무엇을|어떤)\s*절차",
            r"(어떤|무엇인|어떠한)\s*절차\s*(인가요|인지)",
            r"(어떻게|무엇을|어떤)\s*절차\s*(인가요|인지)",
            r"(어떤|무엇인|어떠한)\s*절차\s*(인지|인가)",
            r"(어떻게|무엇을|어떤)\s*절차\s*(인지|인가)",
            
            # 절차 관련 질문 패턴 (더욱 관대한 처리)
            r"절차\s*(는|이|가)\s*(어떻게|무엇인가|무엇인지)",
            r"절차\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"절차\s*(를|을)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"절차\s*(를|을)\s*(알고\s*싶습니다|알고\s*싶어요)",
            r"절차\s*(를|을)\s*(궁금합니다|궁금해요)",
            r"절차\s*(를|을)\s*(알려주시면|설명해주시면)",
            r"절차\s*(를|을)\s*(알려주세요|설명해주세요)",
            r"절차\s*(를|을)\s*(가르쳐주세요|안내해주세요)",
            r"절차\s*(를|을)\s*(알려주시겠어요|설명해주시겠어요)",
            r"절차\s*(를|을)\s*(알려주시겠습니까|설명해주시겠습니까)",
            
            # 절차 관련 질문 형태 (더욱 관대한 처리)
            r"(어떤|무엇인|어떠한)\s*절차",
            r"(어떻게|무엇을|어떤)\s*절차",
            r"(어떤|무엇인|어떠한)\s*절차\s*(인가요|인지)",
            r"(어떻게|무엇을|어떤)\s*절차\s*(인가요|인지)",
            r"(어떤|무엇인|어떠한)\s*절차\s*(인지|인가)",
            r"(어떻게|무엇을|어떤)\s*절차\s*(인지|인가)",
            
            # 절차 관련 질문 패턴 (더욱 관대한 처리)
            r"절차\s*(는|이|가)\s*(어떻게|무엇인가|무엇인지)",
            r"절차\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"절차\s*(를|을)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"절차\s*(를|을)\s*(알고\s*싶습니다|알고\s*싶어요)",
            r"절차\s*(를|을)\s*(궁금합니다|궁금해요)",
            r"절차\s*(를|을)\s*(알려주시면|설명해주시면)",
            r"절차\s*(를|을)\s*(알려주세요|설명해주세요)",
            r"절차\s*(를|을)\s*(가르쳐주세요|안내해주세요)",
            r"절차\s*(를|을)\s*(알려주시겠어요|설명해주시겠어요)",
            r"절차\s*(를|을)\s*(알려주시겠습니까|설명해주시겠습니까)",
            
            # 절차 관련 질문 형태 (더욱 관대한 처리)
            r"(어떤|무엇인|어떠한)\s*절차",
            r"(어떻게|무엇을|어떤)\s*절차",
            r"(어떤|무엇인|어떠한)\s*절차\s*(인가요|인지)",
            r"(어떻게|무엇을|어떤)\s*절차\s*(인가요|인지)",
            r"(어떤|무엇인|어떠한)\s*절차\s*(인지|인가)",
            r"(어떻게|무엇을|어떤)\s*절차\s*(인지|인가)",
            
            # 절차 관련 질문 패턴 (더욱 관대한 처리)
            r"절차\s*(는|이|가)\s*(어떻게|무엇인가|무엇인지)",
            r"절차\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"절차\s*(를|을)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"절차\s*(를|을)\s*(알고\s*싶습니다|알고\s*싶어요)",
            r"절차\s*(를|을)\s*(궁금합니다|궁금해요)",
            r"절차\s*(를|을)\s*(알려주시면|설명해주시면)",
            r"절차\s*(를|을)\s*(알려주세요|설명해주세요)",
            r"절차\s*(를|을)\s*(가르쳐주세요|안내해주세요)",
            r"절차\s*(를|을)\s*(알려주시겠어요|설명해주시겠어요)",
            r"절차\s*(를|을)\s*(알려주시겠습니까|설명해주시겠습니까)",
            
            # 절차 관련 질문 형태 (더욱 관대한 처리)
            r"(어떤|무엇인|어떠한)\s*절차",
            r"(어떻게|무엇을|어떤)\s*절차",
            r"(어떤|무엇인|어떠한)\s*절차\s*(인가요|인지)",
            r"(어떻게|무엇을|어떤)\s*절차\s*(인가요|인지)",
            r"(어떤|무엇인|어떠한)\s*절차\s*(인지|인가)",
            r"(어떻게|무엇을|어떤)\s*절차\s*(인지|인가)",
            
            # 질문 형태의 일반 법률 정보 요청 (더 구체적)
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)\s*(알려주세요|설명해주세요|가르쳐주세요)",
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(는|은|이|가)\s*(어떻게|무엇인가요|무엇인지)",
            r"(계약서|부동산|이혼|형사|변호사|법원|법률|법적)\s*(의|에)\s*(절차|방법|규정|제도|개념|정의)",
            
            # 구체적인 질문 패턴 (더 포괄적)
            r"계약서\s*(작성|작성법|작성방법|작성요령)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"부동산\s*(매매|계약|거래)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"이혼\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"형사\s*(절차|소송|재판)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            r"변호사\s*(선임|선정|고용)\s*(절차|방법|과정)\s*(에\s*대해|에\s*관해|에\s*대한|에\s*관한)",
            
            # 형사법 일반 절차 문의 우선 패턴 (criminal_case_advice 오탐 해결)
            r"법정\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"법적\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"소송\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"재판\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"형사\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"형사소송\s*절차에서\s*(어떻게|무엇을|어떤)",
            
            # 더 구체적인 절차 문의 패턴 추가
            r"법정\s*절차에서\s*어떻게\s*해야\s*할까요",
            r"법적\s*절차에서\s*어떻게\s*해야\s*할까요",
            r"소송\s*절차에서\s*어떻게\s*해야\s*할까요",
            r"재판\s*절차에서\s*어떻게\s*해야\s*할까요",
            r"형사\s*절차에서\s*어떻게\s*해야\s*할까요",
            r"형사소송\s*절차에서\s*어떻게\s*해야\s*할까요",
            
            # 일반 허용 패턴
            r"일반적으로\s*(어떻게|무엇을|어떤)",
            r"보통\s*(어떻게|무엇을|어떤)",
            r"절차\s*(어떻게|무엇을|어떤)",
            r"방법\s*(어떻게|무엇을|어떤)",
            r"관련법령\s*(어떻게|무엇을|어떤)",
            r"판례\s*(찾기|검색|찾는)",
            r"의료분쟁조정중재원\s*(은|는)\s*(어디에|어디)",
            r"국선변호인\s*신청\s*(방법|절차)",
            r"변호인\s*조력권\s*(이|가)\s*(무엇|어떤)",
            r"형사절차\s*(의|에서)\s*(일반적|보통)",
            
            # 일반 법률 용어 허용 패턴 (personal_legal_advice 개선)
            r"담당\s*(변호사|변호인|법무사|법무사)\s*(의|는|이|가)",
            r"변호사\s*(의|는|이|가)\s*(말씀으로는|말씀하시는|말씀하신)",
            r"말씀으로는\s*(어떻게|무엇을|어떤)",
            r"라고\s*(하시는|하신|하는)\s*(데|것|경우)",
            r"합니다\s*(라고|라고\s*하는|라고\s*하시는)",
            r"법률\s*(용어|개념|정의|의미|개요)",
            r"법적\s*(용어|개념|정의|의미|개요)",
            r"법률상\s*(용어|개념|정의|의미|개요)",
            r"법률적으로\s*(어떻게|무엇을|어떤)",
            r"법적으로\s*(어떻게|무엇을|어떤)",
            r"세법\s*관련\s*(일반적|보통)\s*(절차|규정)",
            
            # 의료법 일반 정보 허용 패턴 (medical_legal_advice 개선)
            r"진료기록\s*(사본|열람)\s*(발급|요청|방법|절차)",
            r"의료법\s*(일반|규정|제도|절차)",
            r"의료감정\s*(신청|절차|방법)",
            r"의학적\s*(관점|측면|근거|근거)\s*(에서|으로|로)",
            r"법정\s*(의|에서|으로)\s*(의료|의학|진료)",
            r"절차가\s*(어떻게|무엇을|어떤)\s*(진행|처리|실행)",
            r"명확한가요\s*(의료|의학|진료|의료법)",
            r"의료\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"의학적\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"진료\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"의료법상\s*(일반적|보통)\s*(절차|규정|제도)",
            r"의료법\s*(의|에서|으로)\s*(일반적|보통)",
            r"의료분쟁\s*(조정|중재)\s*(신청|절차|방법)",
            
            # 형사법 일반 절차 문의 허용 패턴 (criminal_case_advice 개선)
            r"진술거부권\s*(안내|설명|권리)",
            r"변호인\s*(선임|선정)\s*(방법|절차)",
            r"압수수색\s*(영장|절차|요건)",
            r"절차에서\s*(어떻게|무엇을|어떤)\s*(진행|처리|실행)",
            r"어떻게\s*(진행|처리|실행)\s*(절차|규정|제도)",
            r"해야\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"할까요\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"소송\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            
            # 형사법 일반 절차 문의 허용 패턴 강화 (criminal_case_advice 오탐 해결)
            r"법정\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"법적\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"소송\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"재판\s*절차에서\s*(어떻게|무엇을|어떤)",
            r"법정\s*절차\s*(의|에서|으로)\s*(일반적|보통)",
            r"법적\s*절차\s*(의|에서|으로)\s*(일반적|보통)",
            r"소송\s*절차\s*(의|에서|으로)\s*(일반적|보통)",
            r"재판\s*절차\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사\s*절차\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사소송\s*절차\s*(의|에서|으로)\s*(일반적|보통)",
            r"법정\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"법적\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"소송\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"재판\s*(절차|규정|제도|법령)\s*(일반적|보통)",
            r"형사절차\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사소송\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사법\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사처벌\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사책임\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사처분\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사제재\s*(의|에서|으로)\s*(일반적|보통)",
            r"형사징계\s*(의|에서|으로)\s*(일반적|보통)",
            r"체포\s*(요건|절차)",
            r"구속\s*(요건|절차)",
            r"형사소송법\s*(절차|개요|요약)",
            r"고소장\s*(작성|제출)\s*(방법|절차)",
            # 형사 일반 정보 추가
            r"처벌불원서\s*(작성|제출)\s*(방법|절차)",
            r"합의서\s*(작성|제출)\s*(방법|절차)",
            r"합의\s*(절차|방법)",
            r"접견\s*(신청|절차|방법)",
            r"석방\s*(요건|절차|방법)",
            # 의료 일반 정보 추가
            r"진료기록\s*보존기간",
            r"비급여\s*고지\s*(의무|제도)",
            r"의료기관\s*(신고|민원)\s*(방법|절차)",
            
            # 의료법 특화 허용 패턴 (더 세밀한 정의)
            r"의료사고\s*(정의|개념|의미|개요)",
            r"의료과실\s*(정의|개념|의미|개요)",
            r"의료진\s*(책임|의무|역할)\s*(범위|한계)",
            r"의료분쟁\s*(정의|개념|유형|분류)",
            r"의료소송\s*(절차|과정|단계|요건)",
            r"의료감정\s*(정의|개념|절차|요건)",
            r"의료분쟁조정중재원\s*(역할|기능|제도|절차)",
            r"의료법\s*(규정|조항|제도|절차)",
            r"의료기관\s*(설립|운영|관리)\s*(요건|절차)",
            r"의료진\s*(면허|자격|교육)\s*(요건|절차)",
            r"의료기술\s*(개발|도입|승인)\s*(절차|요건)",
            r"의료장비\s*(관리|점검|검사)\s*(절차|요건)",
            r"의료정보\s*(보호|관리|공개)\s*(절차|요건)",
            r"의료보험\s*(급여|비급여)\s*(기준|절차)",
            r"의료비\s*(산정|지급|청구)\s*(절차|요건)",
            r"의료기록\s*(작성|보관|열람)\s*(절차|요건)",
            r"의료진\s*(교육|훈련|평가)\s*(절차|요건)",
            r"의료기관\s*(평가|인증|감사)\s*(절차|요건)",
            r"의료사고\s*(신고|조사|처리)\s*(절차|요건)",
            r"의료분쟁\s*(예방|관리|해결)\s*(방안|절차)",
            r"의료윤리\s*(원칙|기준|지침)\s*(내용|절차)",
            r"의료진\s*(권리|의무|책임)\s*(범위|한계)",
            r"환자\s*(권리|의무|책임)\s*(범위|한계)",
            r"의료기관\s*(권리|의무|책임)\s*(범위|한계)",
            r"의료법\s*(위반|처벌|제재)\s*(기준|절차)",
            r"의료진\s*(징계|처벌|제재)\s*(기준|절차)",
            r"의료기관\s*(징계|처벌|제재)\s*(기준|절차)",
            r"의료사고\s*(보상|배상|처리)\s*(기준|절차)",
            r"의료분쟁\s*(조정|중재|화해)\s*(기준|절차)",
            r"의료소송\s*(제기|진행|종료)\s*(절차|요건)",
            r"의료감정\s*(신청|진행|결과)\s*(절차|요건)",
            r"의료분쟁조정중재원\s*(신청|진행|결과)\s*(절차|요건)",
            r"의료법\s*(개정|시행|해석)\s*(절차|요건)",
            r"의료정책\s*(수립|시행|평가)\s*(절차|요건)",
            r"의료제도\s*(개선|개혁|발전)\s*(방향|절차)",
            r"의료서비스\s*(품질|향상|관리)\s*(방안|절차)",
            r"의료안전\s*(관리|향상|보장)\s*(방안|절차)",
            r"의료기술\s*(평가|도입|관리)\s*(절차|요건)",
            r"의료장비\s*(평가|도입|관리)\s*(절차|요건)",
            r"의료정보\s*(시스템|관리|보안)\s*(구축|운영|절차)",
            r"의료보험\s*(제도|정책|관리)\s*(개요|절차)",
            r"의료비\s*(정책|관리|조정)\s*(기준|절차)",
            r"의료기록\s*(시스템|관리|표준)\s*(구축|운영|절차)",
            r"의료진\s*(인사|관리|교육)\s*(정책|절차)",
            r"의료기관\s*(관리|운영|평가)\s*(정책|절차)",
            r"의료사고\s*(예방|관리|처리)\s*(정책|절차)",
            r"의료분쟁\s*(예방|관리|해결)\s*(정책|절차)",
            r"의료윤리\s*(교육|관리|준수)\s*(정책|절차)",
            r"의료진\s*(보호|지원|관리)\s*(정책|절차)",
            r"환자\s*(보호|지원|관리)\s*(정책|절차)",
            r"의료기관\s*(지원|육성|관리)\s*(정책|절차)",
            r"의료법\s*(교육|홍보|관리)\s*(정책|절차)",
            r"의료정책\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료제도\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료서비스\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료안전\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료기술\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료장비\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료정보\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료보험\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료비\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료기록\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료진\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료기관\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료사고\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료분쟁\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료윤리\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료법\s*(연구|개발|평가)\s*(방향|절차)",
            r"의료정책\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료제도\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료서비스\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료안전\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료기술\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료장비\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료정보\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료보험\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료비\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료기록\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료진\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료기관\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료사고\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료분쟁\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료윤리\s*(국제|비교|협력)\s*(연구|개발|평가)",
            r"의료법\s*(국제|비교|협력)\s*(연구|개발|평가)"
        ]
        
        # 형사법 특화 허용 패턴 (더 세밀한 정의)
        self.allowed_patterns.extend([
            # 형사법 정의/개념 설명
            r"형사법\s*(정의|개념|의미|개요)",
            r"형사절차\s*(정의|개념|의미|개요)",
            r"형사소송\s*(정의|개념|의미|개요)",
            r"형사처벌\s*(정의|개념|의미|개요)",
            r"형사책임\s*(정의|개념|의미|개요)",
            r"형사처분\s*(정의|개념|의미|개요)",
            r"형사제재\s*(정의|개념|의미|개요)",
            r"형사징계\s*(정의|개념|의미|개요)",
            
            # 형사절차/요건 설명
            r"형사절차\s*(절차|과정|단계|요건)",
            r"형사소송\s*(절차|과정|단계|요건)",
            r"형사처벌\s*(절차|과정|단계|요건)",
            r"형사책임\s*(절차|과정|단계|요건)",
            r"형사처분\s*(절차|과정|단계|요건)",
            r"형사제재\s*(절차|과정|단계|요건)",
            r"형사징계\s*(절차|과정|단계|요건)",
            
            # 형사법 제도/기관 설명
            r"형사법\s*(제도|기관|역할|기능)",
            r"형사절차\s*(제도|기관|역할|기능)",
            r"형사소송\s*(제도|기관|역할|기능)",
            r"형사처벌\s*(제도|기관|역할|기능)",
            r"형사책임\s*(제도|기관|역할|기능)",
            r"형사처분\s*(제도|기관|역할|기능)",
            r"형사제재\s*(제도|기관|역할|기능)",
            r"형사징계\s*(제도|기관|역할|기능)",
            
            # 형사법 규정/조항 설명
            r"형사법\s*(규정|조항|법령|법률)",
            r"형사절차\s*(규정|조항|법령|법률)",
            r"형사소송\s*(규정|조항|법령|법률)",
            r"형사처벌\s*(규정|조항|법령|법률)",
            r"형사책임\s*(규정|조항|법령|법률)",
            r"형사처분\s*(규정|조항|법령|법률)",
            r"형사제재\s*(규정|조항|법령|법률)",
            r"형사징계\s*(규정|조항|법령|법률)",
            
            # 형사법 정책/관리 설명
            r"형사법\s*(정책|관리|운영|평가)",
            r"형사절차\s*(정책|관리|운영|평가)",
            r"형사소송\s*(정책|관리|운영|평가)",
            r"형사처벌\s*(정책|관리|운영|평가)",
            r"형사책임\s*(정책|관리|운영|평가)",
            r"형사처분\s*(정책|관리|운영|평가)",
            r"형사제재\s*(정책|관리|운영|평가)",
            r"형사징계\s*(정책|관리|운영|평가)",
            
            # 형사법 연구/개발 설명
            r"형사법\s*(연구|개발|분석|평가)",
            r"형사절차\s*(연구|개발|분석|평가)",
            r"형사소송\s*(연구|개발|분석|평가)",
            r"형사처벌\s*(연구|개발|분석|평가)",
            r"형사책임\s*(연구|개발|분석|평가)",
            r"형사처분\s*(연구|개발|분석|평가)",
            r"형사제재\s*(연구|개발|분석|평가)",
            r"형사징계\s*(연구|개발|분석|평가)",
            
            # 형사법 국제/비교 설명
            r"형사법\s*(국제|비교|협력|교류)",
            r"형사절차\s*(국제|비교|협력|교류)",
            r"형사소송\s*(국제|비교|협력|교류)",
            r"형사처벌\s*(국제|비교|협력|교류)",
            r"형사책임\s*(국제|비교|협력|교류)",
            r"형사처분\s*(국제|비교|협력|교류)",
            r"형사제재\s*(국제|비교|협력|교류)",
            r"형사징계\s*(국제|비교|협력|교류)",
            
            # 형사법 교육/홍보 설명
            r"형사법\s*(교육|홍보|안내|설명)",
            r"형사절차\s*(교육|홍보|안내|설명)",
            r"형사소송\s*(교육|홍보|안내|설명)",
            r"형사처벌\s*(교육|홍보|안내|설명)",
            r"형사책임\s*(교육|홍보|안내|설명)",
            r"형사처분\s*(교육|홍보|안내|설명)",
            r"형사제재\s*(교육|홍보|안내|설명)",
            r"형사징계\s*(교육|홍보|안내|설명)",
            
            # 형사법 보호/지원 설명
            r"형사법\s*(보호|지원|관리|서비스)",
            r"형사절차\s*(보호|지원|관리|서비스)",
            r"형사소송\s*(보호|지원|관리|서비스)",
            r"형사처벌\s*(보호|지원|관리|서비스)",
            r"형사책임\s*(보호|지원|관리|서비스)",
            r"형사처분\s*(보호|지원|관리|서비스)",
            r"형사제재\s*(보호|지원|관리|서비스)",
            r"형사징계\s*(보호|지원|관리|서비스)",
            
            # 형사법 육성/발전 설명
            r"형사법\s*(육성|발전|개선|혁신)",
            r"형사절차\s*(육성|발전|개선|혁신)",
            r"형사소송\s*(육성|발전|개선|혁신)",
            r"형사처벌\s*(육성|발전|개선|혁신)",
            r"형사책임\s*(육성|발전|개선|혁신)",
            r"형사처분\s*(육성|발전|개선|혁신)",
            r"형사제재\s*(육성|발전|개선|혁신)",
            r"형사징계\s*(육성|발전|개선|혁신)"
        ])
        
        # 개인적 조언 지표
        self.personal_advice_indicators = [
            "제 경우", "저는", "내 사건", "이런 상황", "현재 상황",
            "진행 중인", "당사자", "구체적 사안", "실제 사건", "내 문제",
            "어떻게 해야", "무엇을 해야", "해야 할까요", "해야 하나요",
            "소송하시겠습니까", "변호사를 고용해야", "법적 조치를 취해야",
            "권리를 주장해야", "승소할까요", "패소할까요", "위자료는 얼마",
            "손해배상은 얼마", "형량은 몇 년", "자백해야 할까요",
            "부인해야 할까요", "의료과실이 있나요", "장애등급은 몇 급"
        ]
        
        # 일반적 정보 요청 지표
        self.general_info_indicators = [
            "일반적으로", "보통", "절차", "방법", "관련법령", "판례",
            "의료분쟁조정중재원", "국선변호인신청", "변호인조력권",
            "형사절차", "형사소송법", "세법", "국세청", "세무전문가"
        ]
    
    def validate(self, query: str, category: Optional[str] = None) -> MultiStageValidationResult:
        """다단계 검증 수행"""
        try:
            self.logger.info(f"Starting multi-stage validation for query: {query[:50]}...")
            # 현재 카테고리를 실행 컨텍스트에 보관
            self._current_category = category
            
            # 검증 시작
            
            stages = []
            total_score = 0.0
            
            # 1단계: 키워드 검사
            stage1_result = self._stage1_keyword_check(query)
            stages.append(stage1_result)
            total_score += stage1_result.score * self.stage_weights[ValidationStage.KEYWORD_CHECK]
            
            # 2단계: 패턴 검사
            stage2_result = self._stage2_pattern_check(query)
            stages.append(stage2_result)
            total_score += stage2_result.score * self.stage_weights[ValidationStage.PATTERN_CHECK]
            
            # 3단계: 맥락 검사
            stage3_result = self._stage3_context_check(query)
            stages.append(stage3_result)
            total_score += stage3_result.score * self.stage_weights[ValidationStage.CONTEXT_CHECK]
            
            # 4단계: 의도 검사
            stage4_result = self._stage4_intent_check(query)
            stages.append(stage4_result)
            total_score += stage4_result.score * self.stage_weights[ValidationStage.INTENT_CHECK]
            
            # 5단계: 최종 결정
            stage5_result = self._stage5_final_decision(query, stages)
            stages.append(stage5_result)
            total_score += stage5_result.score * self.stage_weights[ValidationStage.FINAL_DECISION]
            
            # 최종 결정
            final_decision = self._make_final_decision(total_score, stages, query)
            confidence = min(total_score, 1.0)
            
            
            reasoning = [stage.reasoning for stage in stages]
            
            result = MultiStageValidationResult(
                query=query,
                stages=stages,
                final_decision=final_decision,
                confidence=confidence,
                reasoning=reasoning,
                total_score=total_score,
                timestamp=datetime.now()
            )
            
            self.logger.info(f"Multi-stage validation completed. Final decision: {final_decision.value}, Confidence: {confidence:.2f}")
            return result
            
        except Exception as e:
            self.logger.error(f"Error in multi-stage validation: {e}")
            # 오류 시 안전한 기본값 반환
            return MultiStageValidationResult(
                query=query,
                stages=[],
                final_decision=ValidationResult.RESTRICTED,
                confidence=0.9,
                reasoning=["검증 오류로 인한 제한"],
                total_score=0.9,
                timestamp=datetime.now()
            )
        finally:
            # 컨텍스트 정리
            self._current_category = None
    
    def _stage1_keyword_check(self, query: str) -> StageResult:
        """1단계: 키워드 검사"""
        try:
            query_clean = query.replace(" ", "").replace("?", "").replace("요", "")
            
            # 허용 키워드와 금지 키워드 모두 검사
            allowed_matches = sum(1 for keyword in self.allowed_keywords if keyword in query_clean)
            prohibited_matches = sum(1 for keyword in self.prohibited_keywords if keyword in query_clean)
            
            # 허용 키워드가 있으면 다른 단계와 관계없이 허용 (금지 키워드가 있어도 허용)
            if allowed_matches > 0:
                return StageResult(
                    stage=ValidationStage.KEYWORD_CHECK,
                    result=ValidationResult.ALLOWED,
                    score=0.0,
                    reasoning=f"허용 키워드 {allowed_matches}개 매칭으로 강제 허용 (금지 키워드 {prohibited_matches}개도 있음)",
                    details={"allowed_matches": allowed_matches, "prohibited_matches": prohibited_matches, "category": self._current_category},
                    timestamp=datetime.now()
                )
            
            # 의료법 카테고리는 더 관대한 기준 적용
            if self._current_category == "medical_legal_advice":
                # 의료법에서는 금지 키워드가 있어도 일부 허용
                if prohibited_matches > 0:
                    # 의료법 관련 금지 키워드만 엄격하게 적용
                    medical_prohibited_keywords = {
                        "몇 년", "얼마나 받을 수", "위자료는 얼마", "손해배상은 얼마", "형량은 몇 년",
                        "벌금은 얼마", "보상금은 얼마", "배상액은 얼마", "처벌은 얼마나",
                        "감형받는법", "형량줄이는법", "벌금줄이는법", "처벌피하는법",
                        "법망빠져나가는법", "증거인멸하는법", "범죄숨기는법", "혐의벗어나는법"
                    }
                    medical_prohibited_matches = sum(1 for keyword in medical_prohibited_keywords if keyword in query_clean)
                    
                    if medical_prohibited_matches == 0:
                        # 의료법 관련이 아닌 금지 키워드는 관대하게 처리
                        return StageResult(
                            stage=ValidationStage.KEYWORD_CHECK,
                            result=ValidationResult.ALLOWED,
                            score=0.1,
                            reasoning=f"의료법 카테고리: 비의료법 금지 키워드 {prohibited_matches}개로 관대한 허용",
                            details={"allowed_matches": 0, "prohibited_matches": prohibited_matches, "category": self._current_category},
                    timestamp=datetime.now()
                )
            
            # 금지 키워드가 있으면 제한
            if prohibited_matches > 0:
                score = prohibited_matches / len(self.prohibited_keywords)
                return StageResult(
                    stage=ValidationStage.KEYWORD_CHECK,
                    result=ValidationResult.RESTRICTED,
                    score=score,
                    reasoning=f"금지 키워드 {prohibited_matches}개 매칭으로 제한",
                    details={"prohibited_matches": prohibited_matches, "allowed_matches": 0, "category": self._current_category},
                    timestamp=datetime.now()
                )
            
            # 둘 다 없으면 애매한 케이스인지 확인 (형사 관련 제외)
            ambiguous_indicators = ["어떻게", "무엇을", "어떤", "방법", "해결", "도움", "필요", "문제", "상황", "대응", "조언"]
            criminal_context_indicators = ["법망", "증거", "수사관", "법정", "범죄", "혐의", "변론", "권리행사", "수사과정"]
            
            is_ambiguous = any(indicator in query_clean for indicator in ambiguous_indicators)
            has_criminal_context = any(indicator in query_clean for indicator in criminal_context_indicators)
            
            # 형사 관련 맥락이 있으면 애매한 표현이라도 제한
            if is_ambiguous and has_criminal_context:
                return StageResult(
                    stage=ValidationStage.KEYWORD_CHECK,
                    result=ValidationResult.RESTRICTED,
                    score=0.1,
                    reasoning="형사 관련 맥락이 있는 애매한 표현으로 제한",
                    details={"allowed_matches": 0, "prohibited_matches": 0, "is_ambiguous": True, "has_criminal_context": True, "category": self._current_category},
                    timestamp=datetime.now()
                )
            
            if is_ambiguous:
                return StageResult(
                    stage=ValidationStage.KEYWORD_CHECK,
                    result=ValidationResult.ALLOWED,
                    score=0.0,
                    reasoning="애매한 표현으로 인한 허용",
                    details={"allowed_matches": 0, "prohibited_matches": 0, "is_ambiguous": True, "category": self._current_category},
                    timestamp=datetime.now()
                )
            
            return StageResult(
                stage=ValidationStage.KEYWORD_CHECK,
                result=ValidationResult.ALLOWED,
                score=0.0,
                reasoning="허용/금지 키워드 없음",
                details={"allowed_matches": 0, "prohibited_matches": 0, "category": self._current_category},
                timestamp=datetime.now()
            )
                
        except Exception as e:
            self.logger.error(f"Error in stage 1 keyword check: {e}")
            return StageResult(
                stage=ValidationStage.KEYWORD_CHECK,
                result=ValidationResult.RESTRICTED,
                score=0.9,
                reasoning=f"키워드 검사 오류: {str(e)}",
                details={"error": str(e), "category": self._current_category},
                timestamp=datetime.now()
            )
    
    def _stage2_pattern_check(self, query: str) -> StageResult:
        """2단계: 패턴 검사"""
        try:
            # 허용 패턴 검사
            allowed_pattern_matches = 0
            matched_allowed_patterns = []
            for pattern in self.allowed_patterns:
                if re.search(pattern, query, re.IGNORECASE):
                    allowed_pattern_matches += 1
                    matched_allowed_patterns.append(pattern)
            
            if allowed_pattern_matches > 0:
                return StageResult(
                    stage=ValidationStage.PATTERN_CHECK,
                    result=ValidationResult.ALLOWED,
                    score=0.0,
                    reasoning=f"허용 패턴 {allowed_pattern_matches}개 매칭으로 즉시 허용: {matched_allowed_patterns[:3]}",
                    details={"allowed_pattern_matches": allowed_pattern_matches, "matched_patterns": matched_allowed_patterns, "category": self._current_category, "immediate_allow": True},
                    timestamp=datetime.now()
                )
            
            # 금지 패턴 검사
            prohibited_pattern_matches = 0
            matched_patterns = []
            
            # 의료법 카테고리는 더 관대한 패턴 검사 적용
            if self._current_category == "medical_legal_advice":
                # 의료법 관련 금지 패턴만 엄격하게 적용
                medical_prohibited_patterns = [
                    r"(벌금|보상금|배상액|처벌)\s*(은|는)\s*(얼마|얼마나)",
                    r"(감형|형량줄이기|벌금줄이기|처벌피하기)\s*(받는|하는)\s*방법",
                    r"(법망빠져나가기|증거인멸|범죄숨기기|혐의벗어나기)\s*(하는|하는)\s*방법",
                    r"(몇\s*년|얼마나|얼마)\s*(받을\s*수|받을|받을까요)",
                    r"(형량|벌금|위자료|손해배상|보상금)\s*(예측|산정|계산)\s*(방법|수단)",
                    r"(법적\s*공백|법적\s*빈틈)\s*(이용|활용)\s*방법",
                    r"(허위|가짜)\s*문서\s*(작성|제출)\s*방법",
                    r"기망\s*(하는|하는)\s*방법",
                    r"(면제|피하|회피)\s*방법"
                ]
                
                for pattern in medical_prohibited_patterns:
                    if re.search(pattern, query, re.IGNORECASE):
                        prohibited_pattern_matches += 1
                        matched_patterns.append(pattern)
            else:
                # 다른 카테고리는 모든 금지 패턴 적용
                for pattern in self.prohibited_patterns:
                    if re.search(pattern, query, re.IGNORECASE):
                        prohibited_pattern_matches += 1
                        matched_patterns.append(pattern)
            
            score = prohibited_pattern_matches / len(self.prohibited_patterns)
            
            # 형사 관련 민감한 패턴은 더 강력한 제한 (상한은 환경변수로 조정 가능)
            sensitive_patterns = [
                r"법망.*빠져나가.*방법",
                r"증거.*숨기.*방법", 
                r"범죄.*혐의.*벗어나.*방법",
                r"법망.*회피.*방법",
                r"증거.*인멸.*방법",
                r"범죄.*피하기.*방법"
            ]
            
            # outcome·방법 강화 패턴 (더 강한 가중치)
            outcome_method_patterns = [
                r"(벌금|보상금|배상액|처벌)\s*(은|는)\s*(얼마|얼마나)",
                r"(감형|형량줄이기|벌금줄이기|처벌피하기)\s*(받는|하는)\s*방법",
                r"(법망빠져나가기|증거인멸|범죄숨기기|혐의벗어나기)\s*(하는|하는)\s*방법",
                r"(몇\s*년|얼마나|얼마)\s*(받을\s*수|받을|받을까요)",
                r"(형량|벌금|위자료|손해배상|보상금)\s*(예측|산정|계산)\s*(방법|수단)",
                r"(법적\s*공백|법적\s*빈틈)\s*(이용|활용)\s*방법",
                r"(허위|가짜)\s*문서\s*(작성|제출)\s*방법",
                r"기망\s*(하는|하는)\s*방법",
                r"(면제|피하|회피)\s*방법"
            ]
            
            has_sensitive_pattern = any(pattern in matched_patterns for pattern in sensitive_patterns)
            has_outcome_method_pattern = any(pattern in matched_patterns for pattern in outcome_method_patterns)
            
            if has_sensitive_pattern:
                import os as _os
                try:
                    score_cap = float(_os.getenv("SENSITIVE_PATTERN_SCORE_CAP", "0.7"))
                except Exception:
                    score_cap = 0.7
                score = max(score, min(max(score_cap, 0.0), 1.0))
            
            # outcome·방법 패턴은 더 강한 제한 (카테고리별 차별화)
            if has_outcome_method_pattern:
                # 의료법 카테고리는 더 관대한 기준 적용
                if self._current_category == "medical_legal_advice":
                    score = max(score, 0.65)  # 의료법은 0.65로 완화
                # 형사법 카테고리는 적당한 엄격함 적용 (완화)
                elif self._current_category == "criminal_case_advice":
                    score = max(score, 0.80)  # 형사법은 0.80으로 완화 (0.95 → 0.80)
                # 불법행위 카테고리도 더 엄격한 기준 적용
                elif self._current_category == "illegal_activity_assistance":
                    score = max(score, 0.90)  # 불법행위는 0.90으로 강화
                else:
                    score = max(score, 0.85)  # 다른 민감군은 0.85 유지
            
            # 패턴 제한 임계값 환경변수화 (카테고리별 차별화)
            import os as _os2
            try:
                base_threshold = float(_os2.getenv("PATTERN_RESTRICT_THRESHOLD", "0.01"))
                # 의료법 카테고리는 더 관대한 임계값 적용
                if self._current_category == "medical_legal_advice":
                    pattern_restrict_threshold = base_threshold * 2.0  # 의료법은 2배 완화
                # 형사법 카테고리는 적당한 엄격함 적용 (완화)
                elif self._current_category == "criminal_case_advice":
                    pattern_restrict_threshold = base_threshold * 0.8  # 형사법은 0.8배로 완화 (0.5 → 0.8)
                # 불법행위 카테고리도 더 엄격한 임계값 적용
                elif self._current_category == "illegal_activity_assistance":
                    pattern_restrict_threshold = base_threshold * 0.7  # 불법행위는 0.7배 강화
                else:
                    pattern_restrict_threshold = base_threshold
            except Exception:
                pattern_restrict_threshold = 0.01

            if score > pattern_restrict_threshold:  # 금지 패턴 매칭 시 제한
                return StageResult(
                    stage=ValidationStage.PATTERN_CHECK,
                    result=ValidationResult.RESTRICTED,
                    score=score,
                    reasoning=f"금지 패턴 {prohibited_pattern_matches}개 매칭으로 제한" + 
                             (" (민감한 형사 패턴)" if has_sensitive_pattern else "") +
                             (" (outcome·방법 패턴)" if has_outcome_method_pattern else ""),
                    details={"prohibited_pattern_matches": prohibited_pattern_matches, 
                            "has_sensitive_pattern": has_sensitive_pattern, 
                            "has_outcome_method_pattern": has_outcome_method_pattern,
                            "category": self._current_category},
                    timestamp=datetime.now()
                )
            else:
                return StageResult(
                    stage=ValidationStage.PATTERN_CHECK,
                    result=ValidationResult.ALLOWED,
                    score=score,
                    reasoning=f"금지 패턴 {prohibited_pattern_matches}개 매칭으로 허용",
                    details={"prohibited_pattern_matches": prohibited_pattern_matches, "category": self._current_category},
                    timestamp=datetime.now()
                )
                
        except Exception as e:
            self.logger.error(f"Error in stage 2 pattern check: {e}")
            return StageResult(
                stage=ValidationStage.PATTERN_CHECK,
                result=ValidationResult.RESTRICTED,
                score=0.9,
                reasoning=f"패턴 검사 오류: {str(e)}",
                details={"error": str(e), "category": self._current_category},
                timestamp=datetime.now()
            )
    
    def _stage3_context_check(self, query: str) -> StageResult:
        """3단계: 맥락 검사"""
        try:
            query_lower = query.lower()
            
            # 복합 질문에서 개인적 조언 부분 감지
            complex_personal_score = self._detect_personal_advice_in_complex_query(query)
            
            # 개인적 맥락 지표 검사
            personal_score = sum(1 for indicator in self.personal_advice_indicators if indicator in query_lower)
            
            # 일반적 맥락 지표 검사
            general_score = sum(1 for indicator in self.general_info_indicators if indicator in query_lower)
            
            # 맥락 점수 계산 (복합 질문 점수 포함)
            total_indicators = len(self.personal_advice_indicators) + len(self.general_info_indicators)
            personal_ratio = (personal_score + complex_personal_score) / total_indicators
            general_ratio = general_score / total_indicators
            
            # 복합 질문에서 개인적 조언이 감지되면 강력한 제한
            if complex_personal_score > 0:
                return StageResult(
                    stage=ValidationStage.CONTEXT_CHECK,
                    result=ValidationResult.RESTRICTED,
                    score=personal_ratio,
                    reasoning=f"복합 질문에서 개인적 조언 감지 (복합: {complex_personal_score}, 개인: {personal_score}, 일반: {general_score})",
                    details={
                        "personal_score": personal_score,
                        "general_score": general_score,
                        "complex_personal_score": complex_personal_score,
                        "personal_ratio": personal_ratio,
                        "general_ratio": general_ratio,
                        "category": self._current_category
                    },
                    timestamp=datetime.now()
                )
            
            if personal_ratio > general_ratio and personal_ratio > 0.01:  # 임계값을 0.1에서 0.01로 낮춤
                return StageResult(
                    stage=ValidationStage.CONTEXT_CHECK,
                    result=ValidationResult.RESTRICTED,
                    score=personal_ratio,
                    reasoning=f"개인적 맥락 감지 (개인: {personal_score}, 일반: {general_score})",
                    details={
                        "personal_score": personal_score,
                        "general_score": general_score,
                        "personal_ratio": personal_ratio,
                        "general_ratio": general_ratio,
                        "category": self._current_category
                    },
                    timestamp=datetime.now()
                )
            else:
                return StageResult(
                    stage=ValidationStage.CONTEXT_CHECK,
                    result=ValidationResult.ALLOWED,
                    score=general_ratio,
                    reasoning=f"일반적 맥락 감지 (개인: {personal_score}, 일반: {general_score})",
                    details={
                        "personal_score": personal_score,
                        "general_score": general_score,
                        "personal_ratio": personal_ratio,
                        "general_ratio": general_ratio,
                        "category": self._current_category
                    },
                    timestamp=datetime.now()
                )
                
        except Exception as e:
            self.logger.error(f"Error in stage 3 context check: {e}")
            return StageResult(
                stage=ValidationStage.CONTEXT_CHECK,
                result=ValidationResult.RESTRICTED,
                score=0.9,
                reasoning=f"맥락 검사 오류: {str(e)}",
                details={"error": str(e), "category": self._current_category},
                timestamp=datetime.now()
            )
    
    def _stage4_intent_check(self, query: str) -> StageResult:
        """4단계: 의도 검사"""
        try:
            query_lower = query.lower()
            
            # 조언 요청 의도 지표
            advice_intent_indicators = [
                "어떻게", "해야", "할까요", "하시겠습니까", "해야 할까요",
                "해야 하나요", "어떻게 해야", "무엇을 해야", "해야 할까요"
            ]
            
            # 정보 요청 의도 지표
            info_intent_indicators = [
                "무엇", "어디", "언제", "왜", "어떤", "어떻게", "무엇인가",
                "어디에", "언제부터", "왜 그런", "어떤 경우", "어떻게 되는"
            ]
            
            advice_score = sum(1 for indicator in advice_intent_indicators if indicator in query_lower)
            info_score = sum(1 for indicator in info_intent_indicators if indicator in query_lower)
            
            total_indicators = len(advice_intent_indicators) + len(info_intent_indicators)
            advice_ratio = advice_score / total_indicators
            info_ratio = info_score / total_indicators
            
            # 조언 의도 임계값을 환경변수로 조절 (기본 0.03)
            import os as _os3
            try:
                advice_threshold = float(_os3.getenv("ADVICE_INTENT_THRESHOLD", "0.03"))
            except Exception:
                advice_threshold = 0.03

            if advice_ratio > info_ratio and advice_ratio > advice_threshold:
                return StageResult(
                    stage=ValidationStage.INTENT_CHECK,
                    result=ValidationResult.RESTRICTED,
                    score=advice_ratio,
                    reasoning=f"조언 요청 의도 감지 (조언: {advice_score}, 정보: {info_score})",
                    details={
                        "advice_score": advice_score,
                        "info_score": info_score,
                        "advice_ratio": advice_ratio,
                        "info_ratio": info_ratio,
                        "category": self._current_category
                    },
                    timestamp=datetime.now()
                )
            else:
                return StageResult(
                    stage=ValidationStage.INTENT_CHECK,
                    result=ValidationResult.ALLOWED,
                    score=info_ratio,
                    reasoning=f"정보 요청 의도 감지 (조언: {advice_score}, 정보: {info_score})",
                    details={
                        "advice_score": advice_score,
                        "info_score": info_score,
                        "advice_ratio": advice_ratio,
                        "info_ratio": info_ratio,
                        "category": self._current_category
                    },
                    timestamp=datetime.now()
                )
                
        except Exception as e:
            self.logger.error(f"Error in stage 4 intent check: {e}")
            return StageResult(
                stage=ValidationStage.INTENT_CHECK,
                result=ValidationResult.RESTRICTED,
                score=0.9,
                reasoning=f"의도 검사 오류: {str(e)}",
                details={"error": str(e), "category": self._current_category},
                timestamp=datetime.now()
            )
    
    def _stage5_final_decision(self, query: str, previous_stages: List[StageResult]) -> StageResult:
        """5단계: 최종 결정"""
        try:
            # 이전 단계들의 결과를 종합
            restricted_stages = sum(1 for stage in previous_stages if stage.result == ValidationResult.RESTRICTED)
            allowed_stages = sum(1 for stage in previous_stages if stage.result == ValidationResult.ALLOWED)
            
            total_stages = len(previous_stages)
            restriction_ratio = restricted_stages / total_stages if total_stages > 0 else 0
            
            if restriction_ratio > 0.5:
                return StageResult(
                    stage=ValidationStage.FINAL_DECISION,
                    result=ValidationResult.RESTRICTED,
                    score=restriction_ratio,
                    reasoning=f"이전 단계들에서 제한 비율 {restriction_ratio:.2f}로 제한 결정",
                    details={
                        "restricted_stages": restricted_stages,
                        "allowed_stages": allowed_stages,
                        "restriction_ratio": restriction_ratio,
                        "category": self._current_category
                    },
                    timestamp=datetime.now()
                )
            else:
                return StageResult(
                    stage=ValidationStage.FINAL_DECISION,
                    result=ValidationResult.ALLOWED,
                    score=1.0 - restriction_ratio,
                    reasoning=f"이전 단계들에서 허용 비율 {1.0 - restriction_ratio:.2f}로 허용 결정",
                    details={
                        "restricted_stages": restricted_stages,
                        "allowed_stages": allowed_stages,
                        "restriction_ratio": restriction_ratio,
                        "category": self._current_category
                    },
                    timestamp=datetime.now()
                )
                
        except Exception as e:
            self.logger.error(f"Error in stage 5 final decision: {e}")
            return StageResult(
                stage=ValidationStage.FINAL_DECISION,
                result=ValidationResult.RESTRICTED,
                score=0.9,
                reasoning=f"최종 결정 오류: {str(e)}",
                details={"error": str(e), "category": self._current_category},
                timestamp=datetime.now()
            )
    
    def _detect_personal_advice_in_complex_query(self, query: str) -> int:
        """복합 질문에서 개인적 조언 부분 감지"""
        try:
            # 복합 질문 패턴 (일반 정보 + 개인적 조언) - 강화
            complex_patterns = [
                r"일반적으로.*?그런데.*?(제\s*경우|저는|내\s*사건|제가|저희|우리)",
                r"보통.*?저는.*?(현재|진행\s*중|당하고\s*있는|문제가\s*있는)",
                r"형사절차.*?형량은.*?(몇\s*년|얼마나)",
                r"세법.*?세금.*?(회피|탈세|줄이기)",
                r"법률.*?제\s*경우.*?(어떻게|무엇을|해야)",
                r"계약서.*?제\s*계약서.*?(문제|어떻게)",
                r"소송.*?저는.*?(현재|진행\s*중|승소할까)",
                r"의료.*?의료사고.*?(과실|책임|있나요)",
                r"법원.*?제\s*경우.*?(어떻게|무엇을|해야)",
                r"변호사.*?제\s*사건.*?(어떻게|무엇을|해야)",
                # 더 구체적인 패턴 추가
                r"어떻게\s*(작성|진행|해결).*?제\s*경우.*?어떻게",
                r"방법을\s*알려주세요.*?제\s*경우.*?어떻게",
                r"절차를\s*알려주세요.*?저는.*?현재",
                r"규정을\s*알려주세요.*?세금.*?회피",
                r"상담하는\s*방법.*?위장.*?이혼",
                r"문의하는\s*방법.*?탈세.*?방법",
                r"해결\s*방법.*?제\s*경우.*?어떻게",
                r"진행\s*방법.*?저는.*?현재",
                r"작성\s*방법.*?제\s*계약서.*?문제",
                # 더 구체적인 패턴 추가
                r"상담\s*방법.*?저는.*?현재.*?문제",
                r"문의\s*방법.*?저는.*?현재.*?문제",
                r"상담.*?방법.*?저는.*?현재.*?문제.*?어떻게"
            ]
            
            personal_score = 0
            for pattern in complex_patterns:
                if re.search(pattern, query, re.IGNORECASE):
                    personal_score += 2  # 복합 질문에서 개인적 조언은 높은 점수
            
            return personal_score
            
        except Exception as e:
            self.logger.error(f"Error detecting personal advice in complex query: {e}")
            return 0
    
    def _make_final_decision(self, total_score: float, stages: List[StageResult], query: str = "") -> ValidationResult:
        """최종 결정 로직

        환경 변수로 임계값을 조정할 수 있습니다.
        - RESTRICTION_THRESHOLD_DEFAULT (float, 기본 0.15)
        - ALLOWANCE_THRESHOLD_DEFAULT (float, 기본 0.05)
        - RESTRICTION_THRESHOLD_WITH_ALLOWED (float, 기본 0.25)
        - ALLOWANCE_THRESHOLD_WITH_ALLOWED (float, 기본 0.10)
        - ALLOWED_RATIO_HIGH (float, 기본 0.60)
        - ALLOWED_RATIO_LOW (float, 기본 0.40)
        """
        try:
            # 허용 패턴이 매칭된 경우 최우선 허용 처리
            stage2 = stages[1] if len(stages) > 1 else None
            if stage2 and stage2.details and stage2.details.get("immediate_allow", False):
                return ValidationResult.ALLOWED
            
            # criminal_case_advice 카테고리 특별 처리
            if self._current_category == "criminal_case_advice":
                
                # 일반적인 절차 문의 패턴 확인
                general_procedure_patterns = [
                    r"법정\s*절차에서\s*(어떻게|무엇을|어떤)",
                    r"법적\s*절차에서\s*(어떻게|무엇을|어떤)",
                    r"소송\s*절차에서\s*(어떻게|무엇을|어떤)",
                    r"재판\s*절차에서\s*(어떻게|무엇을|어떤)",
                    r"형사\s*절차에서\s*(어떻게|무엇을|어떤)",
                    r"형사소송\s*절차에서\s*(어떻게|무엇을|어떤)"
                ]
                
                # 구체적인 조언 요청 패턴 확인
                specific_advice_patterns = [
                    r"(알려주세요|가르쳐주세요|설명해주세요)",
                    r"(전략을|방법을|수법을)\s*(알려주세요|가르쳐주세요)",
                    r"(대응|방어|변호)\s*(전략|방법|수법)",
                    r"(몇\s*년|얼마나|얼마)\s*(받을|받을까요|받을\s*수)",
                    r"(징역|집행유예|벌금|형량)\s*(몇\s*년|얼마나|얼마)",
                    r"(소송하시겠습니까|거부하시겠습니까|부인하시겠습니까|합의하시겠습니까)"
                ]
                
                import re
                query_lower = query.lower()
                
                # 일반적인 절차 문의인지 확인
                is_general_procedure = any(re.search(pattern, query_lower, re.IGNORECASE) for pattern in general_procedure_patterns)
                # 구체적인 조언 요청인지 확인
                is_specific_advice = any(re.search(pattern, query_lower, re.IGNORECASE) for pattern in specific_advice_patterns)
                
                
                if is_general_procedure and not is_specific_advice:
                    return ValidationResult.ALLOWED
                elif is_specific_advice:
                    return ValidationResult.RESTRICTED
            
            # 단계별 결과 분석
            restricted_stages = sum(1 for stage in stages if stage.result == ValidationResult.RESTRICTED)
            allowed_stages = sum(1 for stage in stages if stage.result == ValidationResult.ALLOWED)
            
            # 민감한 패턴이 있는지 확인 (2단계에서) - 최우선 처리
            has_sensitive_pattern = False
            if stage2 and stage2.details:
                has_sensitive_pattern = stage2.details.get("has_sensitive_pattern", False)
                self.logger.info(f"민감한 패턴 감지: {has_sensitive_pattern}")
                self.logger.info(f"Stage2 details: {stage2.details}")
            else:
                self.logger.info(f"Stage2가 없거나 details가 없음: stage2={stage2}")
            
            # 민감한 패턴이 있으면 무조건 제한
            if has_sensitive_pattern:
                self.logger.info("민감한 패턴으로 인한 강제 제한")
                return ValidationResult.RESTRICTED
            
            # 패턴 매칭에서 제한된 경우도 강력한 제한으로 처리
            if stage2 and stage2.result == ValidationResult.RESTRICTED:
                self.logger.info("패턴 매칭으로 인한 강제 제한")
                return ValidationResult.RESTRICTED
            
            # 복합 질문에서 개인적 조언이 감지된 경우 강력한 제한
            stage3 = stages[2] if len(stages) > 2 else None
            if stage3 and stage3.details:
                complex_personal_score = stage3.details.get("complex_personal_score", 0)
                if complex_personal_score > 0:
                    self.logger.info(f"복합 질문에서 개인적 조언 감지로 인한 강제 제한 (점수: {complex_personal_score})")
                    return ValidationResult.RESTRICTED
            
            # 1단계에서 허용 키워드가 있었는지 확인
            stage1 = stages[0] if stages else None
            has_allowed_keywords = False
            has_ambiguous_case = False
            
            if stage1:
                if "허용 키워드" in stage1.reasoning and "강제 허용" in stage1.reasoning:
                    has_allowed_keywords = True
                if "애매한 표현으로 인한 허용" in stage1.reasoning:
                    has_ambiguous_case = True
            
            # 애매한 케이스 처리 (형사 관련 맥락 확인)
            if has_ambiguous_case:
                # 1단계에서 형사 관련 맥락이 있었는지 확인
                stage1_details = stage1.details if stage1 else {}
                has_criminal_context = stage1_details.get("has_criminal_context", False)
                
                if has_criminal_context:
                    return ValidationResult.RESTRICTED
                else:
                    return ValidationResult.ALLOWED
            
            # 허용 키워드가 있으면 제한 임계값을 높임 (기본값)
            restriction_threshold = 0.15 if has_allowed_keywords else 0.05
            allowance_threshold = 0.05 if has_allowed_keywords else 0.02
            
            # 민감한 패턴이 있으면 무조건 제한 (가중치 기반 결정 이전)
            if has_sensitive_pattern:
                self.logger.info("민감한 패턴으로 인한 강제 제한")
                return ValidationResult.RESTRICTED
            
            # 허용 키워드가 있으면 더 관대한 임계값 적용
            if has_allowed_keywords:
                restriction_threshold = 0.25  # 더 높은 임계값
                allowance_threshold = 0.1     # 더 낮은 허용 임계값
            
            # 의료법 카테고리는 더 관대한 임계값 적용
            if self._current_category == "medical_legal_advice":
                restriction_threshold = 0.35  # 의료법은 더 높은 임계값 (더 관대)
                allowance_threshold = 0.15   # 의료법은 더 낮은 허용 임계값 (더 관대)
            
            # 개인 법률 자문 카테고리는 더 엄격한 임계값 적용
            elif self._current_category == "personal_legal_advice":
                restriction_threshold = 0.02  # 개인 자문은 더 낮은 임계값 (더 엄격)
                allowance_threshold = 0.01   # 개인 자문은 더 높은 허용 임계값 (더 엄격)
            
            # 기본 임계값 (환경 변수 적용) - 더 엄격한 기본값
            import os as _os
            try:
                default_restriction = float(_os.getenv("RESTRICTION_THRESHOLD_DEFAULT", "0.12"))  # 더 관대하게 조정
                default_allowance = float(_os.getenv("ALLOWANCE_THRESHOLD_DEFAULT", "0.06"))     # 더 관대하게 조정
                allowed_restriction = float(_os.getenv("RESTRICTION_THRESHOLD_WITH_ALLOWED", "0.10"))  # 더 엄격
                allowed_allowance = float(_os.getenv("ALLOWANCE_THRESHOLD_WITH_ALLOWED", "0.04"))      # 더 엄격
                allowed_ratio_high = float(_os.getenv("ALLOWED_RATIO_HIGH", "0.40"))  # 더 엄격
                allowed_ratio_low = float(_os.getenv("ALLOWED_RATIO_LOW", "0.20"))    # 더 엄격
            except Exception:
                default_restriction = 0.05  # 더 엄격한 기본값
                default_allowance = 0.02
                allowed_restriction = 0.15
                allowed_allowance = 0.05
                allowed_ratio_high = 0.40
                allowed_ratio_low = 0.20

            restriction_threshold = default_restriction
            allowance_threshold = default_allowance

            # 허용 키워드가 있으면 더 관대한 임계값 적용 (환경 변수 기반)
            if has_allowed_keywords:
                restriction_threshold = allowed_restriction
                allowance_threshold = allowed_allowance

            # 카테고리별 임계값 적용 (details에 category를 담아둔 경우 또는 컨텍스트 사용)
            category = None
            try:
                # stage details 우선 탐색
                for st in stages:
                    if st.details and "category" in st.details:
                        category = st.details["category"]
                        break
                # 없으면 컨텍스트 사용
                if category is None:
                    category = getattr(self, "_current_category", None)
            except Exception:
                category = getattr(self, "_current_category", None)

            # 절차 관련 질문에 대한 특별 임계값 (더욱 관대한 처리)
            if any(keyword in query.lower() for keyword in ["절차", "방법", "과정", "규정", "제도"]):
                try:
                    restriction_threshold = float(_os.getenv("RESTRICTION_THRESHOLD_PROCEDURE", "0.05"))  # 매우 관대
                    allowance_threshold = float(_os.getenv("ALLOWANCE_THRESHOLD_PROCEDURE", "0.02"))      # 매우 관대
                except Exception:
                    restriction_threshold = 0.05
                    allowance_threshold = 0.02
            
            # 절차 관련 질문에 대한 특별 처리 (더욱 관대한 처리)
            if any(keyword in query.lower() for keyword in ["절차", "방법", "과정", "규정", "제도"]):
                # 절차 관련 질문은 더욱 관대하게 처리
                if total_score > restriction_threshold * 2:  # 2배 더 관대
                    return ValidationResult.RESTRICTED
                elif total_score < allowance_threshold * 2:  # 2배 더 관대
                    return ValidationResult.ALLOWED
                else:
                    return ValidationResult.ALLOWED  # 불확실한 경우도 허용
            
            # 가중치 기반 결정
            if total_score > restriction_threshold:
                return ValidationResult.RESTRICTED
            elif total_score < allowance_threshold:
                return ValidationResult.ALLOWED
            else:
                # 불확실한 경우 단계별 결과로 결정 (허용 비율 고려)
                allowed_ratio = allowed_stages / len(stages) if stages else 0
                
                # 허용 비율이 높으면 허용
                if allowed_ratio >= allowed_ratio_high:
                    return ValidationResult.ALLOWED
                # 제한 비율이 높으면 제한
                elif allowed_ratio <= allowed_ratio_low:
                    return ValidationResult.RESTRICTED
                # 비슷한 경우 금지 키워드가 있으면 제한
                else:
                    if restricted_stages > allowed_stages:
                        return ValidationResult.RESTRICTED
                    else:
                        return ValidationResult.ALLOWED
                    
        except Exception as e:
            self.logger.error(f"Error in making final decision: {e}")
            return ValidationResult.RESTRICTED
    
    def get_validation_summary(self, result: MultiStageValidationResult) -> Dict[str, Any]:
        """검증 결과 요약"""
        try:
            summary = {
                "query": result.query,
                "final_decision": result.final_decision.value,
                "confidence": result.confidence,
                "total_score": result.total_score,
                "stage_summary": [],
                "recommendations": []
            }
            
            # 단계별 요약
            for stage in result.stages:
                summary["stage_summary"].append({
                    "stage": stage.stage.value,
                    "result": stage.result.value,
                    "score": stage.score,
                    "reasoning": stage.reasoning
                })
            
            # 권장사항 생성
            if result.final_decision == ValidationResult.RESTRICTED:
                summary["recommendations"].extend([
                    "구체적인 법률 자문은 변호사와 상담하시는 것을 권합니다",
                    "일반적인 법률 정보나 절차에 대한 질문으로 수정해보세요",
                    "의료분쟁조정중재원이나 국선변호인 신청 방법을 문의하세요"
                ])
            else:
                summary["recommendations"].extend([
                    "일반적인 법률 정보를 제공할 수 있습니다",
                    "더 구체적인 정보가 필요하시면 변호사 상담을 권합니다"
                ])
            
            return summary
            
        except Exception as e:
            self.logger.error(f"Error in getting validation summary: {e}")
            return {
                "query": result.query,
                "final_decision": "error",
                "confidence": 0.0,
                "total_score": 0.0,
                "stage_summary": [],
                "recommendations": ["검증 오류가 발생했습니다"]
            }
