#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LawFirmAI ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏
ÌÖåÏä§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ïã§Ìñâ Î∞è Í¥ÄÎ¶¨
"""

import subprocess
import sys
import argparse
import os
from pathlib import Path
from typing import List, Optional

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ Í≤ΩÎ°ú
PROJECT_ROOT = Path(__file__).parent.parent
TESTS_DIR = Path(__file__).parent

# ÌÖåÏä§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÏùò
TEST_CATEGORIES = {
    "unit": "Îã®ÏúÑ ÌÖåÏä§Ìä∏",
    "integration": "ÌÜµÌï© ÌÖåÏä§Ìä∏", 
    "performance": "ÏÑ±Îä• ÌÖåÏä§Ìä∏",
    "quality": "ÌíàÏßà ÌÖåÏä§Ìä∏",
    "memory": "Î©îÎ™®Î¶¨ ÌÖåÏä§Ìä∏",
    "classification": "Î∂ÑÎ•ò ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏",
    "legal_systems": "Î≤ïÎ•† ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏",
    "contracts": "Í≥ÑÏïΩ Í¥ÄÎ†® ÌÖåÏä§Ìä∏",
    "external_integrations": "Ïô∏Î∂Ä ÏãúÏä§ÌÖú ÌÜµÌï© ÌÖåÏä§Ìä∏",
    "conversational": "ÎåÄÌôî Í¥ÄÎ†® ÌÖåÏä§Ìä∏",
    "database": "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌÖåÏä§Ìä∏",
    "demos": "Îç∞Î™® Î∞è ÏòàÏ†ú ÌÖåÏä§Ìä∏",
    "regression": "ÌöåÍ∑Ä ÌÖåÏä§Ìä∏"
}


def run_tests(
    category: Optional[str] = None,
    verbose: bool = False,
    coverage: bool = False,
    parallel: bool = False,
    markers: Optional[List[str]] = None
) -> int:
    """
    ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    
    Args:
        category: ÌÖåÏä§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨
        verbose: ÏÉÅÏÑ∏ Ï∂úÎ†• Ïó¨Î∂Ä
        coverage: Ïª§Î≤ÑÎ¶¨ÏßÄ Ï∏°Ï†ï Ïó¨Î∂Ä
        parallel: Î≥ëÎ†¨ Ïã§Ìñâ Ïó¨Î∂Ä
        markers: pytest ÎßàÏª§ ÌïÑÌÑ∞
    
    Returns:
        ÌÖåÏä§Ìä∏ Ïã§Ìñâ Í≤∞Í≥º ÏΩîÎìú
    """
    cmd = ["python", "-m", "pytest"]
    
    # ÌÖåÏä§Ìä∏ Í≤ΩÎ°ú ÏÑ§Ï†ï
    if category:
        if category not in TEST_CATEGORIES:
            print(f"‚ùå ÏûòÎ™ªÎêú Ïπ¥ÌÖåÍ≥†Î¶¨: {category}")
            print(f"ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïπ¥ÌÖåÍ≥†Î¶¨: {', '.join(TEST_CATEGORIES.keys())}")
            return 1
        
        test_path = TESTS_DIR / category
        if not test_path.exists():
            print(f"‚ùå ÌÖåÏä§Ìä∏ Í≤ΩÎ°úÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: {test_path}")
            return 1
        
        cmd.append(str(test_path))
    else:
        cmd.append(str(TESTS_DIR))
    
    # ÏòµÏÖò ÏÑ§Ï†ï
    if verbose:
        cmd.append("-v")
    
    if coverage:
        cmd.extend(["--cov=source", "--cov-report=html", "--cov-report=term"])
    
    if parallel:
        cmd.extend(["-n", "auto"])
    
    if markers:
        for marker in markers:
            cmd.extend(["-m", marker])
    
    # Í∏∞Î≥∏ ÏòµÏÖò
    cmd.extend([
        "--tb=short",
        "--strict-markers",
        "--disable-warnings"
    ])
    
    print(f"üöÄ ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë: {' '.join(cmd)}")
    print(f"üìÅ ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨: {PROJECT_ROOT}")
    
    try:
        result = subprocess.run(
            cmd,
            cwd=PROJECT_ROOT,
            check=False
        )
        return result.returncode
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ÌÖåÏä§Ìä∏ Ïã§ÌñâÏù¥ Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§.")
        return 1
    except Exception as e:
        print(f"‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        return 1


def list_categories():
    """ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌÖåÏä§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ï∂úÎ†•"""
    print("üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌÖåÏä§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨:")
    print()
    
    for category, description in TEST_CATEGORIES.items():
        test_path = TESTS_DIR / category
        if test_path.exists():
            test_files = list(test_path.glob("test_*.py"))
            file_count = len(test_files)
            status = "‚úÖ" if file_count > 0 else "‚ö†Ô∏è"
            print(f"  {status} {category:<20} - {description} ({file_count}Í∞ú ÌååÏùº)")
        else:
            print(f"  ‚ùå {category:<20} - {description} (Ìè¥Îçî ÏóÜÏùå)")


def run_specific_test(test_file: str):
    """ÌäπÏ†ï ÌÖåÏä§Ìä∏ ÌååÏùº Ïã§Ìñâ"""
    test_path = TESTS_DIR / test_file
    if not test_path.exists():
        print(f"‚ùå ÌÖåÏä§Ìä∏ ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: {test_path}")
        return 1
    
    cmd = ["python", "-m", "pytest", str(test_path), "-v"]
    
    print(f"üöÄ ÌäπÏ†ï ÌÖåÏä§Ìä∏ Ïã§Ìñâ: {test_file}")
    
    try:
        result = subprocess.run(cmd, cwd=PROJECT_ROOT, check=False)
        return result.returncode
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ÌÖåÏä§Ìä∏ Ïã§ÌñâÏù¥ Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§.")
        return 1


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    parser = argparse.ArgumentParser(
        description="LawFirmAI ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
ÏÇ¨Ïö© ÏòàÏãú:
  python run_tests.py                    # Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
  python run_tests.py unit               # Îã®ÏúÑ ÌÖåÏä§Ìä∏Îßå Ïã§Ìñâ
  python run_tests.py integration -v     # ÌÜµÌï© ÌÖåÏä§Ìä∏ ÏÉÅÏÑ∏ Ï∂úÎ†•
  python run_tests.py performance --coverage  # ÏÑ±Îä• ÌÖåÏä§Ìä∏ + Ïª§Î≤ÑÎ¶¨ÏßÄ
  python run_tests.py --list             # Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ï∂úÎ†•
  python run_tests.py test_file.py       # ÌäπÏ†ï ÌÖåÏä§Ìä∏ ÌååÏùº Ïã§Ìñâ
        """
    )
    
    parser.add_argument(
        "target",
        nargs="?",
        help="ÌÖåÏä§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨ ÎòêÎäî ÌäπÏ†ï ÌÖåÏä§Ìä∏ ÌååÏùº"
    )
    
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="ÏÉÅÏÑ∏ Ï∂úÎ†•"
    )
    
    parser.add_argument(
        "--coverage",
        action="store_true", 
        help="ÏΩîÎìú Ïª§Î≤ÑÎ¶¨ÏßÄ Ï∏°Ï†ï"
    )
    
    parser.add_argument(
        "--parallel",
        action="store_true",
        help="Î≥ëÎ†¨ Ïã§Ìñâ (pytest-xdist ÌïÑÏöî)"
    )
    
    parser.add_argument(
        "-m", "--markers",
        nargs="+",
        help="pytest ÎßàÏª§ ÌïÑÌÑ∞"
    )
    
    parser.add_argument(
        "--list",
        action="store_true",
        help="ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ï∂úÎ†•"
    )
    
    args = parser.parse_args()
    
    if args.list:
        list_categories()
        return 0
    
    if not args.target:
        # Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
        return run_tests(verbose=args.verbose, coverage=args.coverage, 
                        parallel=args.parallel, markers=args.markers)
    
    # ÌäπÏ†ï ÌÖåÏä§Ìä∏ ÌååÏùºÏù∏ÏßÄ ÌôïÏù∏
    if args.target.endswith(".py"):
        return run_specific_test(args.target)
    
    # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    return run_tests(
        category=args.target,
        verbose=args.verbose,
        coverage=args.coverage,
        parallel=args.parallel,
        markers=args.markers
    )


if __name__ == "__main__":
    sys.exit(main())
